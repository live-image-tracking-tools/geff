{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to geff!","text":"<p>geff is a specification for a file format for exchanging spatial graph data. It is not intended to be mutable, editable, chunked, or optimized for use in an application setting.</p> <p>geff is the specification of the file format, but the library also includes implementations for writing from and reading to a networkx graph, a common Python in-memory graph data structure. The library uses semantic versioning, where changes to the specification bump the major or minor versions, and bugfixes for the example implementation bumps the patch version.</p> <p>Learn more in the documentation or check out the source code.</p>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install geff\n</code></pre>"},{"location":"command-line-tools/","title":"Command line tools","text":""},{"location":"command-line-tools/#geff","title":"geff","text":"<p>GEFF Command Line Interface</p> <p>Usage:</p> <pre><code> [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> <pre><code>  --install-completion  Install completion for the current shell.\n  --show-completion     Show completion for the current shell, to copy it or\n                        customize the installation.\n</code></pre>"},{"location":"command-line-tools/#convert-ctc","title":"convert-ctc","text":"<p>Convert a CTC data directory to a GEFF file.</p> <p>Usage:</p> <pre><code> convert-ctc [OPTIONS] CTC_PATH GEFF_PATH\n</code></pre> <p>Options:</p> <pre><code>  CTC_PATH                      The path to the directory containing ctc\n                                tracks (man_track.txt or res_track.txt), e.g.\n                                data/01_GT/TRA or data/01_RES  \\[required]\n  GEFF_PATH                     Path to save the output geff, including the\n                                geff directory name (eg.\n                                ~/folder/folder/data.zarr/tracks.geff)\n                                \\[required]\n  --segm-path PATH              The path to export the segmentation file, if\n                                not provided, it won't be exported.\n  --input-image-dir PATH        The path to the input image directory. If not\n                                provided, it won't be exported.\n  --output-image-path PATH      The path to export the image file, if not\n                                provided, it won't be exported.\n  --tczyx / --no-tczyx          Expand data to make it (T, C, Z, Y, X)\n                                otherwise it's (T,) + Frame shape.  \\[default:\n                                no-tczyx]\n  --overwrite / --no-overwrite  Whether to overwrite the GEFF file if it\n                                already exists.  \\[default: no-overwrite]\n</code></pre>"},{"location":"command-line-tools/#convert-trackmate-xml","title":"convert-trackmate-xml","text":"<p>Convert a TrackMate XML file to a GEFF file.</p> <p>Usage:</p> <pre><code> convert-trackmate-xml [OPTIONS] XML_PATH GEFF_PATH\n</code></pre> <p>Options:</p> <pre><code>  XML_PATH                        The path to the TrackMate XML file\n                                  \\[required]\n  GEFF_PATH                       Path to save the output geff, including the\n                                  geff directory name (eg.\n                                  ~/folder/folder/data.zarr/tracks.geff)\n                                  \\[required]\n  --discard-filtered-spots / --no-discard-filtered-spots\n                                  True to discard the spots filtered out in\n                                  TrackMate, False otherwise.  \\[default: no-\n                                  discard-filtered-spots]\n  --discard-filtered-tracks / --no-discard-filtered-tracks\n                                  True to discard the tracks filtered out in\n                                  TrackMate, False otherwise.  \\[default: no-\n                                  discard-filtered-tracks]\n  --overwrite / --no-overwrite    Whether to overwrite the GEFF file if it\n                                  already exists.  \\[default: no-overwrite]\n  --zarr-format INTEGER           The version of zarr to write.  \\[default: 2]\n</code></pre>"},{"location":"command-line-tools/#info","title":"info","text":"<p>Display information about a GEFF file.</p> <p>Usage:</p> <pre><code> info [OPTIONS] INPUT_PATH\n</code></pre> <p>Options:</p> <pre><code>  INPUT_PATH  Path to the GEFF folder, e.g. data.zarr/tracks.geff  \\[required]\n</code></pre>"},{"location":"command-line-tools/#validate","title":"validate","text":"<p>Validate a GEFF file.</p> <p>Usage:</p> <pre><code> validate [OPTIONS] INPUT_PATH\n</code></pre> <p>Options:</p> <pre><code>  INPUT_PATH  Path to the GEFF folder, e.g. data.zarr/tracks.geff  \\[required]\n</code></pre>"},{"location":"command-line-tools/#running-command-line-tools","title":"Running command line tools","text":"<p>Without pip-installing <code>geff</code>, you can run the tools as  <pre><code>uvx geff -h # by uv\n# or \npipx geff -h # by pipx\n</code></pre></p>"},{"location":"command-line-tools/#running-command-with-a-developmental-build","title":"Running command with a developmental build","text":"<p>You can run the command line tool for your local build as </p> <pre><code>pip install -e .\ngeff -h\n</code></pre>"},{"location":"specification/","title":"Geff specification","text":"<p>The graph exchange file format is <code>zarr</code> based. A graph is stored in a zarr group, which can have any name. This allows storing multiple <code>geff</code> graphs inside the same zarr root directory. A <code>geff</code> group is identified by the presence of a <code>geff</code> key in the <code>.zattrs</code>. Other <code>geff</code> metadata is also stored in the <code>.zattrs</code> file of the <code>geff</code> group, nested under the <code>geff</code> key. The <code>geff</code> group must contain a <code>nodes</code> group and an <code>edges</code> group (albeit both can be empty). <code>geff</code> graphs have the option to provide properties for <code>nodes</code> and <code>edges</code>.</p> <p><code>geff</code> graphs have the option to provide time and spatial dimensions as special attributes. These attributes are specified in the <code>axes</code> section of the metadata, inspired by the OME-zarr <code>axes</code> specification. </p>"},{"location":"specification/#zarr-specification","title":"Zarr specification","text":"<p>Currently, <code>geff</code> supports zarr specifications 2 and 3. However, <code>geff</code> will default to writing specification 2 because graphs written to the zarr v3 spec will not be compatible with all applications. When zarr 3 is more fully adopted by other libraries and tools, we will move to a zarr spec 3 default.</p>"},{"location":"specification/#geff-metadata","title":"Geff metadata geff Required  geff_version Required  directed Required  axes  Any of  name Required  type  Any of  unit  Any of  min  Any of  max  Any of  node_props_metadata  Any of  Additional Properties  identifier Required  dtype Required  unit  Any of  name  Any of  description  Any of  edge_props_metadata  Any of  Additional Properties  sphere  Any of  ellipsoid  Any of  track_node_props  Any of  Additional Properties  related_objects  Any of  type Required  path Required  label_prop  Any of  affine  Any of  matrix Required  display_hints  Any of  display_horizontal Required  display_vertical Required  display_depth  Any of  display_time  Any of  extra  Additional Properties","text":"<p>This is an auto-generated description of the schema for GEFF metadata. Further description of specific sections of interest are below.</p> GeffSchema Type: object root          geffgeff_metadataType: object <p>geff_metadata</p> root          geff geff_versionGeff VersionType: string <p>Geff version string following semantic versioning (MAJOR.MINOR.PATCH), optionally with .devN and/or +local parts (e.g., 0.3.1.dev6+g61d5f18). If not provided, the version will be set to the current geff package version.</p> Must match regular expression: <code>^\\d+\\.\\d+(?:\\.\\d+)?(?:\\.dev\\d+)?(?:\\+[a-zA-Z0-9]+)?</code> root          geff directedDirectedType: boolean <p>True if the graph is directed, otherwise False.</p> root          geff axesAxes Default: null <p>Optional list of Axis objects defining the axes of each node in the graph. Each object's <code>name</code> must be an existing attribute on the nodes. The optional <code>type</code> keymust be one of <code>space</code>, <code>time</code> or <code>channel</code>, though readers may not use this information. Each axis can additionally optionally define a <code>unit</code> key, which should match the validOME-Zarr units, and <code>min</code> and <code>max</code> keys to define the range of the axis.</p> <ul><li> Option 1 </li><li> Option 2 </li></ul> root          geff axes anyOf item 0Type: array No Additional ItemsEach item of this array must be: root          geff axes anyOf item 0 AxisAxisType: object <p>TODO docstring</p> root          geff axes anyOf item 0 Axis nameNameType: string root          geff axes anyOf item 0 Axis typeType Default: null <ul><li> Option 1 </li><li> Option 2 </li></ul> root          geff axes anyOf item 0 Axis type anyOf item 0Type: string root          geff axes anyOf item 0 Axis type anyOf item 1Type: null root          geff axes anyOf item 0 Axis unitUnit Default: null <ul><li> Option 1 </li><li> Option 2 </li></ul> root          geff axes anyOf item 0 Axis unit anyOf item 0Type: string root          geff axes anyOf item 0 Axis unit anyOf item 1Type: null root          geff axes anyOf item 0 Axis minMin Default: null <ul><li> Option 1 </li><li> Option 2 </li></ul> root          geff axes anyOf item 0 Axis min anyOf item 0Type: number root          geff axes anyOf item 0 Axis min anyOf item 1Type: null root          geff axes anyOf item 0 Axis maxMax Default: null <ul><li> Option 1 </li><li> Option 2 </li></ul> root          geff axes anyOf item 0 Axis max anyOf item 0Type: number root          geff axes anyOf item 0 Axis max anyOf item 1Type: null root          geff axes anyOf item 1Type: null root          geff node_props_metadataNode Props Metadata Default: null <p>Metadata for node properties. The keys are the property identifiers, and the values are PropMetadata objects describing the properties.</p> <ul><li> Option 1 </li><li> Option 2 </li></ul> root          geff node_props_metadata anyOf item 0Type: object <p>Each additional property must conform to the following schema</p> root          geff node_props_metadata anyOf item 0 PropMetadataPropMetadataType: object <p>Metadata describing a property in the geff graph.</p> root          geff node_props_metadata anyOf item 0 PropMetadata identifierIdentifierType: string <p>Identifier of the property. Must be unique within its own component subgroup (nodes or edges). Must be a non-empty string.</p> <p>Must be at least <code>1</code> characters long</p> root          geff node_props_metadata anyOf item 0 PropMetadata dtypeDtypeType: string <p>Data type of the property. Must be a non-empty string that can be parsed into a numpy dtype, or the special value 'varlength' to indicate a variable length property. Examples of valid values: 'int', 'int16', 'float64', 'str', 'bool'. Examples of invalid values: 'integer', 'np.int16', 'number', 'string'.</p> <p>Must be at least <code>1</code> characters long</p> root          geff node_props_metadata anyOf item 0 PropMetadata unitUnit Default: null <p>Optional unit of the property.</p> <ul><li> Option 1 </li><li> Option 2 </li></ul> root          geff node_props_metadata anyOf item 0 PropMetadata unit anyOf item 0Type: string root          geff node_props_metadata anyOf item 0 PropMetadata unit anyOf item 1Type: null root          geff node_props_metadata anyOf item 0 PropMetadata nameName Default: null <p>Optional human friendly name of the property</p> <ul><li> Option 1 </li><li> Option 2 </li></ul> root          geff node_props_metadata anyOf item 0 PropMetadata name anyOf item 0Type: string root          geff node_props_metadata anyOf item 0 PropMetadata name anyOf item 1Type: null root          geff node_props_metadata anyOf item 0 PropMetadata descriptionDescription Default: null <p>Optional description of the property.</p> <ul><li> Option 1 </li><li> Option 2 </li></ul> root          geff node_props_metadata anyOf item 0 PropMetadata description anyOf item 0Type: string root          geff node_props_metadata anyOf item 0 PropMetadata description anyOf item 1Type: null root          geff node_props_metadata anyOf item 1Type: null root          geff edge_props_metadataEdge Props Metadata Default: null <p>Metadata for edge properties. The keys are the property identifiers, and the values are PropMetadata objects describing the properties.</p> <ul><li> Option 1 </li><li> Option 2 </li></ul> root          geff edge_props_metadata anyOf item 0Type: object <p>Each additional property must conform to the following schema</p> root          geff edge_props_metadata anyOf item 0 PropMetadataPropMetadataType: object <p>Metadata describing a property in the geff graph.</p> Same definition as PropMetadata root          geff edge_props_metadata anyOf item 1Type: null root          geff sphereNode property: Detections as spheres Default: null <pre><code>        Name of the optional `sphere` property.\n\n        A sphere is defined by\n        - a center point, already given by the `space` type properties\n        - a radius scalar, stored in this property\n</code></pre> <ul><li> Option 1 </li><li> Option 2 </li></ul> root          geff sphere anyOf item 0Type: string root          geff sphere anyOf item 1Type: null root          geff ellipsoidNode property: Detections as ellipsoids Default: null <pre><code>        Name of the `ellipsoid` property.\n\n        An ellipsoid is assumed to be in the same coordinate system as the `space` type\n        properties.\n\n        It is defined by\n        - a center point :math:`c`, already given by the `space` type properties\n        - a covariance matrix :math:`\\Sigma`, symmetric and positive-definite, stored in this\n          property as a `2x2`/`3x3` array.\n\n        To plot the ellipsoid:\n        - Compute the eigendecomposition of the covariance matrix\n        :math:`\\Sigma = Q \\Lambda Q^{\\top}`\n        - Sample points :math:`z` on the unit sphere\n        - Transform the points to the ellipsoid by\n        :math:`x = c + Q \\Lambda^{(1/2)} z`.\n</code></pre> <ul><li> Option 1 </li><li> Option 2 </li></ul> root          geff ellipsoid anyOf item 0Type: string root          geff ellipsoid anyOf item 1Type: null root          geff track_node_propsTrack Node Props Default: null <p>Node properties denoting tracklet and/or lineage IDs. A tracklet is defined as a simple path of connected nodes where the initiating node has any incoming degree and outgoing degree at most 1,and the terminating node has incoming degree at most 1 and any outgoing degree, and other nodes along the path have in/out degree of 1. Each tracklet must contain the maximal set of connected nodes that match this definition - no sub-tracklets. A lineage is defined as a weakly connected component on the graph. The dictionary can store one or both of 'tracklet' or 'lineage' keys.</p> <ul><li> Option 1 </li><li> Option 2 </li></ul> root          geff track_node_props anyOf item 0Type: object <p>Each additional property must conform to the following schema</p> root          geff track_node_props anyOf item 0 additionalPropertiesType: string root          geff track_node_props anyOf item 1Type: null root          geff related_objectsRelated Objects Default: null <p>A list of dictionaries of related objects such as labels or images. Each dictionary must contain 'type', 'path', and optionally 'labelprop' properties. The 'type' represents the data type. 'labels' and 'image' should be used for label and image objects, respectively. Other types are also allowed, The 'path' should be relative to the geff zarr-attributes file. It is strongly recommended all related objects are stored as siblings of the geff group within the top-level zarr group. The 'labelprop' is only valid for type 'labels' and specifies the node property that will be used to identify the labels in the related object. </p> <ul><li> Option 1 </li><li> Option 2 </li></ul> root          geff related_objects anyOf item 0Type: array No Additional ItemsEach item of this array must be: root          geff related_objects anyOf item 0 RelatedObjectRelatedObjectType: object <p>TODO docstring</p> root          geff related_objects anyOf item 0 RelatedObject typeTypeType: string <p>Type of the related object. 'labels' for label objects, 'image' for image objects. Other types are also allowed, but may not be recognized by reader applications. </p> root          geff related_objects anyOf item 0 RelatedObject pathPathType: string <p>Path of the related object within the zarr group, relative to the geff zarr-attributes file. It is strongly recommended all related objects are stored as siblings of the geff group within the top-level zarr group.</p> root          geff related_objects anyOf item 0 RelatedObject label_propLabel Prop Default: null <p>Property name for label objects. This is the node property that will be used to identify the labels in the related object. This is only valid for type 'labels'.</p> <ul><li> Option 1 </li><li> Option 2 </li></ul> root          geff related_objects anyOf item 0 RelatedObject label_prop anyOf item 0Type: string root          geff related_objects anyOf item 0 RelatedObject label_prop anyOf item 1Type: null root          geff related_objects anyOf item 1Type: null root          geff affine Default: null <p>Affine transformation matrix to transform the graph coordinates to the physical coordinates. The matrix must have the same number of dimensions as the number of axes in the graph.</p> <ul><li> Affine </li><li> Option 2 </li></ul> root          geff affine anyOf AffineAffineType: object <p>Affine transformation matrix following scipy conventions.</p> <p>Internally stores transformations as homogeneous coordinate matrices (N+1, N+1). The transformation matrix follows scipy.ndimage.affine_transform convention where the matrix maps output coordinates to input coordinates (inverse/pull transformation).</p> <p>For a point pout in output space, the corresponding input point pin is computed as: pinhomo = matrix @ pouthomo where pouthomo = [pout; 1] and pin = pinhomo[:-1]</p> <p>Attributes:     matrix (np.ndarray) : square, homogeneous transformation matrix (ndim+1, ndim+1)</p> root          geff affine anyOf Affine matrixMatrixType: array of array <p>Homogeneous transformation matrix (ndim+1, ndim+1)</p> No Additional ItemsEach item of this array must be: root          geff affine anyOf Affine matrix matrix itemsType: array of number No Additional ItemsEach item of this array must be: root          geff affine anyOf Affine matrix matrix items matrix items itemsType: number root          geff affine anyOf item 1Type: null root          geff display_hints Default: null <p>Metadata indicating how spatiotemporal axes are displayed by a viewer</p> <ul><li> DisplayHint </li><li> Option 2 </li></ul> root          geff display_hints anyOf DisplayHintDisplayHintType: object <p>Metadata indicating how spatiotemporal axes are displayed by a viewer</p> root          geff display_hints anyOf DisplayHint display_horizontalDisplay HorizontalType: string <p>Which spatial axis to use for horizontal display</p> root          geff display_hints anyOf DisplayHint display_verticalDisplay VerticalType: string <p>Which spatial axis to use for vertical display</p> root          geff display_hints anyOf DisplayHint display_depthDisplay Depth Default: null <p>Optional, which spatial axis to use for depth display</p> <ul><li> Option 1 </li><li> Option 2 </li></ul> root          geff display_hints anyOf DisplayHint display_depth anyOf item 0Type: string root          geff display_hints anyOf DisplayHint display_depth anyOf item 1Type: null root          geff display_hints anyOf DisplayHint display_timeDisplay Time Default: null <p>Optional, which temporal axis to use for time</p> <ul><li> Option 1 </li><li> Option 2 </li></ul> root          geff display_hints anyOf DisplayHint display_time anyOf item 0Type: string root          geff display_hints anyOf DisplayHint display_time anyOf item 1Type: null root          geff display_hints anyOf item 1Type: null root          geff extraExtraType: object <p>Extra metadata that is not part of the schema</p> <p>Additional Properties of any type are allowed.</p> root          geff extra additionalPropertiesType: object"},{"location":"specification/#axes-list","title":"Axes list","text":"<p>The axes list is modeled after the OME-zarr specifications and is used to identify spatio-temporal properties on the graph nodes. If the same names are used in the axes metadata of the related image or segmentation data, applications can use this information to align graph node locations with image data. </p> <p>The order of the axes in the list is meaningful. For one, any downstream properties that are an array of values with one value per (spatial) axis will be in the order of the axis list (filtering to only the spatial axes by the <code>type</code> field if needed). Secondly, if associated image or segmentation data does not have axes metadata, the order of the spatiotemporal axes is a good default guess for aligning the graph and the image data, although there is no way to denote the channel dimension in the graph spec. If you are writing out a geff with an associated segmentation and/or image dataset, we highly recommend providing the axis names for your segmentation/image using the OME-zarr spec, including channel dimensions if needed.</p>"},{"location":"specification/#geff.metadata._valid_values.VALID_AXIS_TYPES","title":"geff.metadata._valid_values.VALID_AXIS_TYPES  <code>module-attribute</code>","text":"<pre><code>VALID_AXIS_TYPES: tuple[AxisType, ...] = get_args(AxisType)\n</code></pre>"},{"location":"specification/#geff.metadata._valid_values.VALID_SPACE_UNITS","title":"geff.metadata._valid_values.VALID_SPACE_UNITS  <code>module-attribute</code>","text":"<pre><code>VALID_SPACE_UNITS: tuple[SpaceUnits, ...] = get_args(\n    SpaceUnits\n)\n</code></pre>"},{"location":"specification/#geff.metadata._valid_values.VALID_TIME_UNITS","title":"geff.metadata._valid_values.VALID_TIME_UNITS  <code>module-attribute</code>","text":"<pre><code>VALID_TIME_UNITS: tuple[TimeUnits, ...] = get_args(\n    TimeUnits\n)\n</code></pre>"},{"location":"specification/#property-metadata","title":"Property metadata","text":"<p>The metadata for each node/edge property is (optionally) stored in the <code>node_props_metadata</code> and <code>edge_props_metadata</code> entries. Each property must have a string identifier (the group name for the property) and a dtype. The dtype can be any string that can be coerced into a numpy dtype, or the special <code>varlength</code> dtype indicating this is a variable length property (coming soon). String properties should have dtype <code>str</code>, not <code>varlength</code>, even though they are stored using the same variable length mechanism.</p>"},{"location":"specification/#affine-transformations","title":"Affine transformations","text":"<p>The optional <code>affine</code> field allows specifying a global affine transformation that maps the graph coordinates stored in the node properties to a physical coordinate system. The value matrix is stored as a <code>(N + 1) \u00d7 (N + 1)</code> homogeneous matrix following the <code>scipy.ndimage.affine_transform</code> convention, where N equals the number of spatio-temporal axes declared in <code>axes</code>.</p>"},{"location":"specification/#extra-attributes","title":"Extra attributes","text":"<p>The optional <code>extra</code> object is a free-form dictionary that can hold any additional, application-specific metadata that is not covered by the core geff schema. Users may place arbitrary keys and values inside <code>extra</code> without fear of clashing with future reserved fields. Although the core <code>geff</code> reader makes these attributes available, their meaning and use are left entirely to downstream applications. </p>"},{"location":"specification/#the-nodes-group","title":"The <code>nodes</code> group","text":"<p>The nodes group will contain an <code>ids</code> array and optionally a <code>props</code> group. </p>"},{"location":"specification/#the-ids-array","title":"The <code>ids</code> array","text":"<p>The <code>nodes\\ids</code> array is a 1D array of node IDs of length <code>N</code> &gt;= 0, where <code>N</code> is the number of nodes in the graph. Node ids must be unique. Node IDs can have any type supported by zarr (except floats), but we recommend integer dtypes. For large graphs, <code>uint64</code> might be necessary to provide enough range for every node to have a unique ID. In the minimal case of an empty graph, the <code>ids</code> array will be present but empty. </p>"},{"location":"specification/#the-props-group-and-node-property-groups","title":"The <code>props</code> group and <code>node property</code> groups","text":"<p>The <code>nodes\\props</code> group is optional and will contain one or more <code>node property</code> groups, each with a <code>values</code> array and an optional <code>missing</code> array.</p> <ul> <li><code>values</code> arrays can be any zarr supported dtype, and can be N-dimensional. The first dimension of the <code>values</code> array must have the same length as the node <code>ids</code> array, such that each row of the property <code>values</code> array stores the property for the node at that index in the ids array.</li> <li> <p>The <code>missing</code> array is an optional, a one dimensional boolean array to support properties that are not present on all nodes. A <code>1</code> at an index in the <code>missing</code> array indicates that the <code>value</code> of that property for the node at that index is None, and the value in the <code>values</code> array at that index should be ignored. If the <code>missing</code> array is not present, that means that all nodes have values for the property.</p> </li> <li> <p>Geff provides special support for spatio-temporal properties, although they are not required. When <code>axes</code> are specified in the <code>geff</code> metadata, each axis name identifies a spatio-temporal property. Spatio-temporal properties are not allowed to have missing arrays. Otherwise, they are identical to other properties from a storage specification perspective.</p> </li> <li> <p>The <code>seg_id</code> property is an optional, special node property that stores the segmenatation label for each node. The <code>seg_id</code> values do not need to be unique, in case labels are repeated between time points. If the <code>seg_id</code> property is not present, it is assumed that the graph is not associated with a segmentation. </p> </li> <li> <p>Geff provides special support for predefined shape properties, although they are not required. These currently include: <code>sphere</code>, <code>ellipsoid</code>. Values can be marked as <code>missing</code>, and a geff graph may contain multiple different shape properties. Units of shapes are assumed to be the same as the units on the spatial axes. Otherwise, shape properties are identical to other properties from a storage specification perspective.</p> <ul> <li><code>sphere</code>: Hypersphere in n spatial dimensions, defined by a scalar radius.</li> <li><code>ellipsoid</code>: Defined by a symmetric positive-definite covariance matrix, whose dimensionality is assumed to match the spatial axes.</li> </ul> </li> </ul> <p>Note</p> <p>When writing a graph with missing properties to the geff format, you must fill in a dummy value in the <code>values</code> array for the nodes that are missing the property, in order to keep the indices aligned with the node ids. </p>"},{"location":"specification/#the-edges-group","title":"The <code>edges</code> group","text":"<p>Similar to the <code>nodes</code> group, the <code>edges</code> group will contain an <code>ids</code> array and an optional <code>props</code> group.</p>"},{"location":"specification/#the-ids-array_1","title":"The <code>ids</code> array","text":"<p>The <code>edges\\ids</code> array is a 2D array with the same dtype as the <code>nodes\\ids</code> array. It has shape <code>(E, 2)</code>, where <code>E</code> is the number of edges in the graph. If there are no edges in the graph, the edge group and <code>ids</code> array must be present with shape <code>(0, 2)</code>.  All elements in the <code>edges\\ids</code> array must also be present in the <code>nodes\\ids</code> array, and the data types of the two id arrays must match. Each row represents an edge between two nodes. For directed graphs, the first column is the source nodes and the second column holds the target nodes. For undirected graphs, the order is arbitrary. Edges should be unique (no multiple edges between the same two nodes) and edges from a node to itself are not supported.</p>"},{"location":"specification/#the-props-group-and-edge-property-groups","title":"The <code>props</code> group and <code>edge property</code> groups","text":"<p>The <code>edges\\props</code> group will contain zero or more <code>edge property</code> groups, each with a <code>values</code> array and an optional <code>missing</code> array.</p> <ul> <li><code>values</code> arrays can be any zarr supported dtype, and can be N-dimensional. The first dimension of the <code>values</code> array must have the same length as the <code>edges\\ids</code> array, such that each row of the property <code>values</code> array stores the property for the edge at that index in the ids array.</li> <li>The <code>missing</code> array is an optional, a one dimensional boolean array to support properties that are not present on all edges. A <code>1</code> at an index in the <code>missing</code> array indicates that the <code>value</code> of that property for the edge at that index is missing, and the value in the <code>values</code> array at that index should be ignored. If the <code>missing</code> array is not present, that means that all edges have values for the property.</li> </ul> <p>The <code>edges/props</code> is optional. If you do not have any edge properties, the <code>edges\\props</code> can be absent. </p>"},{"location":"specification/#example-file-structure-and-metadata","title":"Example file structure and metadata","text":"<p>Here is a schematic of the expected file structure. <pre><code>/path/to.zarr\n    /tracking_graph\n        .zattrs  # graph metadata with `geff_version`\n        nodes/\n            ids  # shape: (N,)  dtype: uint64\n            props/\n                t/\n                    values # shape: (N,) dtype: uint16\n                z/\n                    values # shape: (N,) dtype: float32\n                y/\n                    values # shape: (N,) dtype: float32\n                x/\n                    values # shape: (N,) dtype: float32\n                radius/\n                    values # shape: (N,) dtype: int | float\n                    missing # shape: (N,) dtype: bool\n                covariance3d/\n                    values # shape: (N, 3, 3) dtype: float\n                    missing # shape: (N,) dtype: bool\n                color/\n                    values # shape: (N, 4) dtype: float16\n                    missing # shape: (N,) dtype: bool\n        edges/\n            ids  # shape: (E, 2) dtype: uint64\n            props/\n                distance/\n                    values # shape: (E,) dtype: float16\n                score/\n                    values # shape: (E,) dtype: float16\n                    missing # shape: (E,) dtype: bool\n    # optional:\n    /segmentation \n\n    # unspecified, but totally okay:\n    /raw \n</code></pre> This is a geff metadata zattrs file that matches the above example structure. <pre><code>// /path/to.zarr/tracking_graph/.zattrs\n{   \n    \"geff\": {\n        \"directed\": true,\n        \"geff_version\": \"0.1.3.dev4+gd5d1132.d20250616\",\n        // axes are optional\n        \"axes\": [\n            {\"name\": \"t\", \"type\": \"time\", \"unit\": \"second\", \"min\": 0, \"max\": 125},\n            {\"name\": \"z\", \"type\": \"space\", \"unit\": \"micrometer\", \"min\": 1523.36, \"max\": 4398.1},\n            {\"name\": \"y\", \"type\": \"space\", \"unit\": \"micrometer\", \"min\": 81.667, \"max\": 1877.7},\n            {\"name\": \"x\", \"type\": \"space\", \"unit\": \"micrometer\", \"min\": 764.42, \"max\": 2152.3}\n        ],\n        // predefined node attributes for storing detections as spheres or ellipsoids\n        \"sphere\": \"radius\", // optional\n        \"ellipsoid\": \"covariance3d\", // optional\n        \"display_hints\": {\n            \"display_horizontal\": \"x\",\n            \"display_vertical\": \"y\",\n            \"display_depth\": \"z\",\n            \"display_time\": \"t\"\n        },\n        // node attributes corresponding to tracklet and/or lineage IDs\n        \"track_node_props\": {\n            \"lineage\": \"ultrack_lineage_id\",\n            \"tracklet\": \"ultrack_id\"\n        },\n        \"related_objects\": [\n            {\n                \"type\":\"labels\", \"path\":\"../segmentation/\", \"label_prop\": \"seg_id\"\n            },\n            {\n                \"type\":\"image\", \"path\":\"../raw/\"\n            }\n        ],\n        // optional coordinate transformation is defined as homogeneous coordinates\n        // It is expected to be a (D+1)x(D+1) matrix where D is the number of axes\n        \"affine\": [\n            [1, 0, 0, 0, 0],\n            [0, 1, 0, 0, 0],\n            [0, 0, 1, 0, 0],\n            [0, 0, 0, 1, 0],\n            [0, 0, 0, 0, 1]\n        ],\n        // custom other things must be placed **inside** the extra attribute\n        \"extra\": {\n            // ...\n        }\n    }\n}\n</code></pre></p> <p>Minimal geff metadata must have <code>version</code> and <code>directed</code> fields under a <code>geff</code> field. <pre><code>{\n    \"geff\": {\n        \"version\": \"0.0.0\",\n        \"directed\": false\n    }\n}\n</code></pre></p>"},{"location":"tracking/","title":"Tracking graph standards","text":"<p>While GEFFs can store any graphs, many of our core users are concerned with tracking cells in microscopy imagery. Therefore, we provide special support and standardization for exchanging tracking GEFFs, or GEFFs that contain tracking outputs.</p>"},{"location":"tracking/#tracklet-and-lineage-id-properties","title":"Tracklet and lineage ID properties","text":"<p>Often when analyzing and visualizing tracking outputs, we assign IDs based on identity over time. The geff specification supports specifying and validating optional node properties representing tracklet and lineage IDs.</p> <ul> <li>Tracklet: A simple path of connected nodes where the initiating node has any incoming degree and outgoing degree at most 1 and the terminating node has incoming degree at most 1 and any outgoing degree, and other nodes along the path have in/out degree of 1. Each tracklet must contain the maximal set of connected nodes that match this definition - no sub-tracklets.</li> <li>Lineage: a weakly connected component of the graph</li> </ul> <p>The <code>tracklet</code> and <code>lineage</code> properties specified in the <code>track_node_props</code> section of the specification point to node properties that contain tracklet IDs or lineage IDs - each node in a tracklet/lineage has the same ID, and all nodes not in the same tracklet/lineage have different IDs. </p> <p>By providing and enforcing a definition of tracklet and lineage, and ensuring tracklet and lineage IDs can be exchanged rather than requiring them to be recomputed, we can ensure consistency of downstream analyses on the tracks across different tools.</p>"},{"location":"what-is-geff/","title":"What is geff?","text":"<p><code>geff</code> is a graph exchange file format that seeks to fulfill the following needs:</p> <ul> <li>Provide a storage/exchange format for graphs and optional segmentation</li> <li>Provide a common API with reference implementations for use in other projects</li> </ul>"},{"location":"what-is-geff/#design-decisions-and-assumptions","title":"Design Decisions and Assumptions","text":"<ul> <li>Raw image data is not included in the <code>geff</code> spec. However, to keep nodes linked to segmentation labels, support for specifying the seg_id of each node in a standard way, along with the path to the segmentation, are included in the <code>spec</code>.</li> <li>Since <code>geff</code> is an exchange format, we do not provide support for searching or filtering.</li> <li>We do not provide support for editing or changing the graph on the fly.</li> <li>In order to support efficient reading/writing, we assume the graph can fit into memory.</li> </ul>"},{"location":"reference/geff/","title":"geff","text":""},{"location":"reference/geff/#geff","title":"geff","text":""},{"location":"reference/geff/#geff.GeffMetadata","title":"GeffMetadata","text":"<p>               Bases: <code>BaseModel</code></p> <p>Geff metadata schema to validate the attributes json file in a geff zarr</p>"},{"location":"reference/geff/#geff.GeffMetadata.read","title":"read  <code>classmethod</code>","text":"<pre><code>read(store: StoreLike) -&gt; GeffMetadata\n</code></pre> <p>Helper function to read GeffMetadata from a zarr geff group.</p> <p>Parameters:</p> Name Type Description Default <code>store</code> <code>zarr store | Path | str</code> <p>The geff store to read the metadata from</p> required <p>Returns:</p> Name Type Description <code>GeffMetadata</code> <code>GeffMetadata</code> <p>The GeffMetadata object</p>"},{"location":"reference/geff/#geff.GeffMetadata.write","title":"write","text":"<pre><code>write(store: StoreLike) -&gt; None\n</code></pre> <p>Helper function to write GeffMetadata into the group of a zarr geff store. Maintains consistency by preserving ignored attributes with their original values.</p> <p>Parameters:</p> Name Type Description Default <code>store</code> <code>zarr store | Path | str</code> <p>The geff store to write the metadata to</p> required"},{"location":"reference/geff/#geff.GeffReader","title":"GeffReader","text":"<pre><code>GeffReader(source: StoreLike, validate: bool = True)\n</code></pre> <p>File reader class that allows subset reading to an intermediate dict representation.</p> <p>The subsets can be a subset of node and edge properties, and a subset of nodes and edges.</p> <p>Example: <pre><code>&gt;&gt;&gt; from pathlib import Path\n... from geff.file_reader import FileReader\n\n&gt;&gt;&gt; path = Path(\"example/path\")\n... file_reader = FileReader(path)\n... file_reader.read_node_prop(\"seg_id\")\n... # in_memory_geff will only have the node property \"seg_id\"\n... in_memory_geff = file_reader.build()\n... in_memory_geff\n\n&gt;&gt;&gt; file_reader.read_node_prop(\"t\")\n... # Now graph dict will have two node properties: \"seg_id\" and \"t\"\n... in_memory_geff = file_reader.build()\n... in_memory_geff\n\n&gt;&gt;&gt; in_memory_geff = file_reader.build(file_reader.node_props[\"t\"][\"values\"][:] &lt; 5)\n... # Now in_memory_geff will only be a subset with nodes \"t\" &lt; 5\n... in_memory_geff\n</code></pre></p> <p>File reader class that allows subset reading to an intermediate dict representation.</p> <p>Parameters:</p> Name Type Description Default <code>source</code> <code>str | Path | store</code> <p>Either a str/path to the root of the geff zarr (where the .attrs contains the geff metadata), or a zarr store object</p> required <code>validate</code> <code>bool</code> <p>Flag indicating whether to perform validation on the geff file before loading into memory. If set to False and there are format issues, will likely fail with a cryptic error. Defaults to True.</p> <code>True</code>"},{"location":"reference/geff/#geff.GeffReader.build","title":"build","text":"<pre><code>build(\n    node_mask: NDArray[bool_] | None = None,\n    edge_mask: NDArray[bool_] | None = None,\n) -&gt; InMemoryGeff\n</code></pre> <p>Build an <code>InMemoryGeff</code> by loading the data from a GEFF zarr.</p> <p>A set of nodes and edges can be selected using <code>node_mask</code> and <code>edge_mask</code>.</p> <p>Parameters:</p> Name Type Description Default <code>node_mask</code> <code>np.ndarray of bool</code> <p>A boolean numpy array to mask build a graph of a subset of nodes, where <code>node_mask</code> is equal to True. It must be a 1D array of length number of nodes.</p> <code>None</code> <code>edge_mask</code> <code>np.ndarray of bool</code> <p>A boolean numpy array to mask build a graph of a subset of edge, where <code>edge_mask</code> is equal to True. It must be a 1D array of length number of edges.</p> <code>None</code> <p>Returns:     InMemoryGeff: A dictionary of in memory numpy arrays representing the graph.</p>"},{"location":"reference/geff/#geff.GeffReader.read_edge_props","title":"read_edge_props","text":"<pre><code>read_edge_props(names: Iterable[str] | None = None) -&gt; None\n</code></pre> <p>Read the edge property with the name <code>name</code> from a GEFF.</p> <p>If no names are specified, then all properties will be loaded</p> <p>Call <code>build</code> to get the output <code>InMemoryGeff</code> with the loaded properties.</p> <p>Parameters:</p> Name Type Description Default <code>names</code> <code>iterable of str</code> <p>The names of the edge properties to load. If None all node properties will be loaded.</p> <code>None</code>"},{"location":"reference/geff/#geff.GeffReader.read_node_props","title":"read_node_props","text":"<pre><code>read_node_props(names: Iterable[str] | None = None) -&gt; None\n</code></pre> <p>Read the node property with the name <code>name</code> from a GEFF.</p> <p>If no names are specified, then all properties will be loaded</p> <p>Call <code>build</code> to get the output <code>InMemoryGeff</code> with the loaded properties.</p> <p>Parameters:</p> Name Type Description Default <code>names</code> <code>iterable of str</code> <p>The names of the node properties to load. If None all node properties will be loaded.</p> <code>None</code>"},{"location":"reference/geff/#geff.read","title":"read","text":"<pre><code>read(\n    store: StoreLike,\n    validate: bool = True,\n    node_props: list[str] | None = None,\n    edge_props: list[str] | None = None,\n    backend: Literal[\"networkx\"] = \"networkx\",\n) -&gt; tuple[nx.Graph | nx.DiGraph, GeffMetadata]\n</code></pre><pre><code>read(\n    store: StoreLike,\n    validate: bool,\n    node_props: list[str] | None,\n    edge_props: list[str] | None,\n    backend: Literal[\"rustworkx\"],\n) -&gt; tuple[rx.PyGraph | rx.PyDiGraph, GeffMetadata]\n</code></pre><pre><code>read(\n    store: StoreLike,\n    validate: bool,\n    node_props: list[str] | None,\n    edge_props: list[str] | None,\n    backend: Literal[\"spatial-graph\"],\n    *,\n    position_attr: str = \"position\",\n) -&gt; tuple[\n    sg.SpatialGraph | sg.SpatialDiGraph, GeffMetadata\n]\n</code></pre> <pre><code>read(\n    store: StoreLike,\n    validate: bool = True,\n    node_props: list[str] | None = None,\n    edge_props: list[str] | None = None,\n    backend: SupportedBackend = \"networkx\",\n    **backend_kwargs: Any,\n) -&gt; tuple[Any, GeffMetadata]\n</code></pre> <p>Read a GEFF to a chosen backend.</p> <p>Parameters:</p> Name Type Description Default <code>store</code> <code>StoreLike</code> <p>The path or zarr store to the root of the geff zarr, where the .attrs contains the geff  metadata.</p> required <code>validate</code> <code>bool</code> <p>Flag indicating whether to perform validation on the geff file before loading into memory. If set to False and there are format issues, will likely fail with a cryptic error. Defaults to True.</p> <code>True</code> <code>node_props</code> <code>list of str</code> <p>The names of the node properties to load, if None all properties will be loaded, defaults to None.</p> <code>None</code> <code>edge_props</code> <code>list of str</code> <p>The names of the edge properties to load, if None all properties will be loaded, defaults to None.</p> <code>None</code> <code>backend</code> <code>{'networkx', 'rustworkx', 'spatial-graph'}</code> <p>Flag for the chosen backend, default is \"networkx\".</p> <code>'networkx'</code> <code>backend_kwargs</code> <code>Any</code> <p>Additional kwargs that may be accepted by the backend when reading the data.</p> <code>{}</code> <p>Returns:</p> Type Description <code>tuple[Any, GeffMetadata]</code> <p>tuple[Any, GeffMetadata]: Graph object of the chosen backend, and the GEFF metadata.</p>"},{"location":"reference/geff/#geff.read_nx","title":"read_nx","text":"<pre><code>read_nx(\n    store: StoreLike,\n    validate: bool = True,\n    node_props: list[str] | None = None,\n    edge_props: list[str] | None = None,\n) -&gt; tuple[nx.Graph, GeffMetadata]\n</code></pre> <p>Read a geff file into a networkx graph. Metadata properties will be stored in the graph properties, accessed via <code>G.graph[key]</code> where G is a networkx graph.</p> <p>Parameters:</p> Name Type Description Default <code>store</code> <code>str | Path | zarr store</code> <p>The path/str to the geff zarr, or the store itself. Opens in append mode, so will only overwrite geff-controlled groups.</p> required <code>validate</code> <code>bool</code> <p>Flag indicating whether to perform validation on the geff file before loading into memory. If set to False and there are format issues, will likely fail with a cryptic error. Defaults to True.</p> <code>True</code> <code>node_props</code> <code>list of str</code> <p>The names of the node properties to load, if None all properties will be loaded, defaults to None.</p> <code>None</code> <code>edge_props</code> <code>list of str</code> <p>The names of the edge properties to load, if None all properties will be loaded, defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <code>tuple[Graph, GeffMetadata]</code> <p>A networkx graph containing the graph that was stored in the geff file format</p>"},{"location":"reference/geff/#geff.read_rx","title":"read_rx","text":"<pre><code>read_rx(\n    store: StoreLike,\n    validate: bool = True,\n    node_props: list[str] | None = None,\n    edge_props: list[str] | None = None,\n) -&gt; tuple[rx.PyGraph | rx.PyDiGraph, GeffMetadata]\n</code></pre> <p>Read a geff file into a rustworkx graph. Metadata properties will be stored in the graph.attrs dict and can be accessed via <code>G.attrs[key]</code> where G is a rustworkx graph.</p> <p>The graph will have a <code>to_rx_id_map</code> attribute that maps geff node ids to rustworkx node indices. This can be used to map back to the original geff node ids.</p> <p>Parameters:</p> Name Type Description Default <code>store</code> <code>StoreLike</code> <p>The path/str to the geff zarr, or the store itself.</p> required <code>validate</code> <code>bool</code> <p>Whether to validate the geff file.</p> <code>True</code> <code>node_props</code> <code>list[str] | None</code> <p>The names of the node properties to load, if None all properties will be loaded, defaults to None.</p> <code>None</code> <code>edge_props</code> <code>list[str] | None</code> <p>The names of the edge properties to load, if None all properties will be loaded, defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <code>tuple[PyGraph | PyDiGraph, GeffMetadata]</code> <p>A tuple containing the rustworkx graph and the metadata.</p>"},{"location":"reference/geff/#geff.read_sg","title":"read_sg","text":"<pre><code>read_sg(\n    store: StoreLike,\n    validate: bool = True,\n    position_attr: str = \"position\",\n    node_props: list[str] | None = None,\n    edge_props: list[str] | None = None,\n) -&gt; tuple[\n    sg.SpatialGraph | sg.SpatialDiGraph, GeffMetadata\n]\n</code></pre> <p>Read a geff file into a SpatialGraph.</p> <p>Because SpatialGraph does not support missing/ragged node/edge attributes, missing arrays will be ignored, with a warning raised.</p> <p>Args:</p> <pre><code>store (Path | str | zarr store):\n\n    The path to the root of the geff zarr, where the .attrs contains\n    the geff  metadata.\n\nvalidate (bool, optional):\n\n    Flag indicating whether to perform validation on the geff file\n    before loading into memory. If set to False and there are format\n    issues, will likely fail with a cryptic error. Defaults to True.\n\nposition_attr (str, optional):\n\n    How to call the position attribute in the returned SpatialGraph.\n    Defaults to \"position\".\n\nnode_props (list of str, optional):\n\n    The names of the node properties to load, if None all properties\n    will be loaded, defaults to None.\n\nedge_props (list of str, optional):\n\n    The names of the edge properties to load, if None all properties\n    will be loaded, defaults to None.\n</code></pre> <p>Returns:</p> <pre><code>A tuple containing the spatial_graph graph and the metadata.\n</code></pre>"},{"location":"reference/geff/#geff.validate_structure","title":"validate_structure","text":"<pre><code>validate_structure(store: StoreLike) -&gt; None\n</code></pre> <p>Ensure that the structure of the zarr conforms to geff specification</p> <p>Parameters:</p> Name Type Description Default <code>store</code> <code>str | Path | zarr store</code> <p>Check the geff zarr, either str/Path/store</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>If geff specs are violated</p> <code>FileNotFoundError</code> <p>If store is not a valid zarr store or path doesn't exist</p>"},{"location":"reference/geff/#geff.write_nx","title":"write_nx","text":"<pre><code>write_nx(\n    graph: Graph,\n    store: StoreLike,\n    metadata: GeffMetadata | None = None,\n    axis_names: list[str] | None = None,\n    axis_units: list[str | None] | None = None,\n    axis_types: list[str | None] | None = None,\n    zarr_format: Literal[2, 3] = 2,\n) -&gt; None\n</code></pre> <p>Write a networkx graph to the geff file format</p> <p>Parameters:</p> Name Type Description Default <code>graph</code> <code>Graph</code> <p>A networkx graph</p> required <code>store</code> <code>str | Path | zarr store</code> <p>The path/str to the output zarr, or the store itself. Opens in append mode, so will only overwrite geff-controlled groups.</p> required <code>metadata</code> <code>GeffMetadata</code> <p>The original metadata of the graph. Defaults to None. If provided, will override the graph properties.</p> <code>None</code> <code>axis_names</code> <code>Optional[list[str]]</code> <p>The names of the spatial dims represented in position property. Defaults to None. Will override both value in graph properties and metadata if provided.</p> <code>None</code> <code>axis_units</code> <code>Optional[list[str]]</code> <p>The units of the spatial dims represented in position property. Defaults to None. Will override value both value in graph properties and metadata if provided.</p> <code>None</code> <code>axis_types</code> <code>Optional[list[str]]</code> <p>The types of the spatial dims represented in position property. Usually one of \"time\", \"space\", or \"channel\". Defaults to None. Will override both value in graph properties and metadata if provided.</p> <code>None</code> <code>zarr_format</code> <code>Literal[2, 3]</code> <p>The version of zarr to write. Defaults to 2.</p> <code>2</code>"},{"location":"reference/geff/#geff.write_rx","title":"write_rx","text":"<pre><code>write_rx(\n    graph: PyGraph,\n    store: StoreLike,\n    metadata: GeffMetadata | None = None,\n    node_id_dict: dict[int, int] | None = None,\n    axis_names: list[str] | None = None,\n    axis_units: list[str | None] | None = None,\n    axis_types: list[str | None] | None = None,\n    zarr_format: Literal[2, 3] = 2,\n) -&gt; None\n</code></pre> <p>Write a rustworkx graph to the geff file format</p> Note on RustworkX Node ID Handling <p>RustworkX uses internal node indices that are not directly controllable by the user. These indices are typically sequential integers starting from 0, but may have gaps if nodes are removed. To maintain compatibility with geff's requirement for stable node identifiers, this function uses the following approach:</p> <ol> <li>If node_id_dict is None: Uses rustworkx's internal node indices directly</li> <li>If node_id_dict is provided: Maps rx node indices to custom identifiers</li> </ol> <p>When reading back with read_rx(), the mapping is reversed to restore the original rustworkx node indices, ensuring round-trip consistency.</p> <p>Parameters:</p> Name Type Description Default <code>graph</code> <code>PyGraph</code> <p>The rustworkx graph to write.</p> required <code>store</code> <code>StoreLike</code> <p>The store to write the geff file to.</p> required <code>metadata</code> <code>GeffMetadata | None</code> <p>The original metadata of the graph. Defaults to None.</p> <code>None</code> <code>node_id_dict</code> <code>dict[int, int] | None</code> <p>A dictionary mapping rx node indices to arbitrary indices. This allows custom node identifiers to be used in the geff file instead of rustworkx's internal indices. If None, uses rx indices directly.</p> <code>None</code> <code>axis_names</code> <code>list[str] | None</code> <p>The names of the axes.</p> <code>None</code> <code>axis_units</code> <code>list[str | None] | None</code> <p>The units of the axes.</p> <code>None</code> <code>axis_types</code> <code>list[str | None] | None</code> <p>The types of the axes.</p> <code>None</code> <code>zarr_format</code> <code>Literal[2, 3]</code> <p>The zarr format to use.</p> <code>2</code>"},{"location":"reference/geff/#geff.write_sg","title":"write_sg","text":"<pre><code>write_sg(\n    graph: SpatialGraph | SpatialDiGraph,\n    store: StoreLike,\n    axis_names: list[str] | None = None,\n    axis_units: list[str] | None = None,\n    axis_types: list[str] | None = None,\n    zarr_format: Literal[2, 3] = 2,\n) -&gt; None\n</code></pre> <p>Write a SpatialGraph to the geff file format.</p> <p>Because SpatialGraph does not support ragged or missing node/edge attributes, the missing arrays will not be written.</p> <p>Parameters:</p> Name Type Description Default <code>graph</code> <code>SpatialGraph</code> <p>The graph to write.</p> required <code>store</code> <code>str | Path | zarr store</code> <p>The path to the output zarr. Opens in append mode, so will only overwrite geff-controlled groups.</p> required <code>axis_names</code> <code>Optional[list[str]]</code> <p>The names of the spatial dims represented in position attribute. Defaults to None.</p> <code>None</code> <code>axis_units</code> <code>Optional[list[str]]</code> <p>The units of the spatial dims represented in position attribute. Defaults to None.</p> <code>None</code> <code>axis_types</code> <code>Optional[list[str]]</code> <p>The types of the spatial dims represented in position property. Usually one of \"time\", \"space\", or \"channel\". Defaults to None.</p> <code>None</code> <code>zarr_format</code> <code>Literal[2, 3]</code> <p>The version of zarr to write. Defaults to 2.</p> <code>2</code>"},{"location":"reference/geff/convert/","title":"geff.convert","text":""},{"location":"reference/geff/convert/#geff.convert","title":"geff.convert","text":""},{"location":"reference/geff/convert/#geff.convert.ctc_tiffs_to_zarr","title":"ctc_tiffs_to_zarr","text":"<pre><code>ctc_tiffs_to_zarr(\n    ctc_path: Path,\n    output_store: StoreLike,\n    ctzyx: bool = False,\n    overwrite: bool = False,\n) -&gt; None\n</code></pre> <p>Convert a CTC file to a Zarr file.</p> <p>Parameters:</p> Name Type Description Default <code>ctc_path</code> <code>Path</code> <p>The path to the CTC file.</p> required <code>output_store</code> <code>StoreLike</code> <p>The path to the Zarr file.</p> required <code>ctzyx</code> <code>bool</code> <p>Expand data to make it (T, C, Z, Y, X) otherwise it's (T,) + Frame shape.</p> <code>False</code> <code>overwrite</code> <code>bool</code> <p>Whether to overwrite the Zarr file if it already exists.</p> <code>False</code>"},{"location":"reference/geff/convert/#geff.convert.from_ctc_to_geff","title":"from_ctc_to_geff","text":"<pre><code>from_ctc_to_geff(\n    ctc_path: Path,\n    geff_path: Path,\n    segmentation_store: StoreLike | None = None,\n    tczyx: bool = False,\n    overwrite: bool = False,\n) -&gt; None\n</code></pre> <p>Convert a CTC file to a GEFF file.</p> <p>Parameters:</p> Name Type Description Default <code>ctc_path</code> <code>Path</code> <p>The path to the CTC file.</p> required <code>geff_path</code> <code>Path</code> <p>The path to the GEFF file.</p> required <code>segmentation_store</code> <code>StoreLike | None</code> <p>The path or store to save the segmentation to.                 If not provided, it won't be exported.</p> <code>None</code> <code>tczyx</code> <code>bool</code> <p>Expand data to make it (T, C, Z, Y, X) otherwise it's (T,) + Frame shape.</p> <code>False</code> <code>overwrite</code> <code>bool</code> <p>Whether to overwrite the GEFF file if it already exists.</p> <code>False</code>"},{"location":"reference/geff/convert/#geff.convert.from_trackmate_xml_to_geff","title":"from_trackmate_xml_to_geff","text":"<pre><code>from_trackmate_xml_to_geff(\n    xml_path: Path | str,\n    geff_path: Path | str,\n    discard_filtered_spots: bool = False,\n    discard_filtered_tracks: bool = False,\n    overwrite: bool = False,\n    zarr_format: Literal[2, 3] = 2,\n) -&gt; None\n</code></pre> <p>Convert a TrackMate XML file to a GEFF file.</p> <p>Parameters:</p> Name Type Description Default <code>xml_path</code> <code>Path | str</code> <p>The path to the TrackMate XML file.</p> required <code>geff_path</code> <code>Store</code> <p>The path to the GEFF file.</p> required <code>discard_filtered_spots</code> <code>bool</code> <p>True to discard the spots filtered out in TrackMate, False otherwise. False by default.</p> <code>False</code> <code>discard_filtered_tracks</code> <code>bool</code> <p>True to discard the tracks filtered out in TrackMate, False otherwise. False by default.</p> <code>False</code> <code>overwrite</code> <code>bool</code> <p>Whether to overwrite the GEFF file if it already exists.</p> <code>False</code> <code>zarr_format</code> <code>Literal[2, 3]</code> <p>The version of zarr to write. Defaults to 2.</p> <code>2</code> <p>Raises:</p> Type Description <code>UserWarning</code> <p>If the XML file does not contain specific metadata tags or if there are issues with the TrackMate metadata.</p>"},{"location":"reference/geff/core_io/","title":"geff.core_io","text":""},{"location":"reference/geff/core_io/#geff.core_io","title":"geff.core_io","text":""},{"location":"reference/geff/core_io/#geff.core_io.read_to_memory","title":"read_to_memory","text":"<pre><code>read_to_memory(\n    source: StoreLike,\n    validate: bool = True,\n    node_props: Iterable[str] | None = None,\n    edge_props: Iterable[str] | None = None,\n) -&gt; InMemoryGeff\n</code></pre> <p>Read a GEFF zarr file to into memory as a series of numpy arrays in a dictionary.</p> <p>A subset of node and edge properties can be selected with the <code>node_props</code> and <code>edge_props</code> argument.</p> <p>Parameters:</p> Name Type Description Default <code>source</code> <code>str | Path | zarr store</code> <p>Either a path to the root of the geff zarr (where the .attrs contains the geff metadata), or a zarr store object</p> required <code>validate</code> <code>bool</code> <p>Flag indicating whether to perform validation on the geff file before loading into memory. If set to False and there are format issues, will likely fail with a cryptic error. Defaults to True.</p> <code>True</code> <code>node_props</code> <code>iterable of str</code> <p>The names of the node properties to load, if None all properties will be loaded, defaults to None.</p> <code>None</code> <code>edge_props</code> <code>iterable of str</code> <p>The names of the edge properties to load, if None all properties will be loaded, defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <code>InMemoryGeff</code> <p>A InMemoryGeff object containing the graph as a TypeDict of in memory numpy arrays</p> <code>InMemoryGeff</code> <p>(metadata, node_ids, edge_ids, node_props, edge_props)</p>"},{"location":"reference/geff/core_io/#geff.core_io.write_arrays","title":"write_arrays","text":"<pre><code>write_arrays(\n    geff_store: StoreLike,\n    node_ids: ndarray,\n    node_props: dict[str, PropDictNpArray] | None,\n    edge_ids: ndarray,\n    edge_props: dict[str, PropDictNpArray] | None,\n    metadata: GeffMetadata,\n    node_props_unsquish: dict[str, list[str]] | None = None,\n    edge_props_unsquish: dict[str, list[str]] | None = None,\n    zarr_format: Literal[2, 3] = 2,\n) -&gt; None\n</code></pre> <p>Write a geff file from already constructed arrays of node and edge ids and props</p> <p>Currently does not do any validation that the arrays are valid, but could be added as an optional flag.</p> <p>Parameters:</p> Name Type Description Default <code>geff_store</code> <code>str | Path | zarr store</code> <p>The path/str to the geff zarr, or the store itself. Opens in append mode, so will only overwrite geff-controlled groups.</p> required <code>node_ids</code> <code>ndarray</code> <p>An array containing the node ids. Must have same dtype as edge_ids.</p> required <code>node_props</code> <code>dict[str, PropDictNpArray] | None</code> <p>A dictionary from node property names to (values, missing) arrays, which should have same length as node_ids.</p> required <code>edge_ids</code> <code>ndarray</code> <p>An array containing the edge ids. Must have same dtype as node_ids.</p> required <code>edge_props</code> <code>dict[str, PropDictNpArray] | None</code> <p>A dictionary from edge property names to (values, missing) arrays, which should have same length as edge_ids.</p> required <code>metadata</code> <code>GeffMetadata</code> <p>The metadata of the graph.</p> required <code>zarr_format</code> <code>Literal[2, 3]</code> <p>The zarr specification to use when writing the zarr. Defaults to 2.</p> <code>2</code> <code>node_props_unsquish</code> <code>dict[str, list[str]] | None</code> <p>a dictionary indicication how to \"unsquish\" a property into individual scalars (e.g.: <code>{\"pos\": [\"z\", \"y\", \"x\"]}</code> will store the position property as three individual properties called \"z\", \"y\", and \"x\".</p> <code>None</code> <code>edge_props_unsquish</code> <code>dict[str, list[str]] | None</code> <p>a dictionary indicication how to \"unsquish\" a property into individual scalars (e.g.: <code>{\"pos\": [\"z\", \"y\", \"x\"]}</code> will store the position property as three individual properties called \"z\", \"y\", and \"x\".</p> <code>None</code>"},{"location":"reference/geff/core_io/#geff.core_io.write_dicts","title":"write_dicts","text":"<pre><code>write_dicts(\n    geff_store: StoreLike,\n    node_data: Iterable[tuple[Any, dict[str, Any]]],\n    edge_data: Iterable[tuple[Any, dict[str, Any]]],\n    node_prop_names: Sequence[str],\n    edge_prop_names: Sequence[str],\n    axis_names: Sequence[str] | None = None,\n    zarr_format: Literal[2, 3] = 2,\n) -&gt; None\n</code></pre> <p>Write a dict-like graph representation to geff</p> <p>Parameters:</p> Name Type Description Default <code>geff_store</code> <code>str | Path | zarr store</code> <p>The path/str to the geff zarr, or the store itself. Opens in append mode, so will only overwrite geff-controlled groups.</p> required <code>node_data</code> <code>Sequence[tuple[Any, dict[str, Any]]]</code> <p>A sequence of tuples with node_ids and node_data, where node_data is a dictionary from str names to any values.</p> required <code>edge_data</code> <code>Sequence[tuple[Any, dict[str, Any]]]</code> <p>A sequence of tuples with edge_ids and edge_data, where edge_data is a dictionary from str names to any values.</p> required <code>node_prop_names</code> <code>Sequence[str]</code> <p>A list of node properties to include in the geff</p> required <code>edge_prop_names</code> <code>Sequence[str]</code> <p>a list of edge properties to include in the geff</p> required <code>axis_names</code> <code>Sequence[str] | None</code> <p>The name of the spatiotemporal properties, if any. Defaults to None</p> <code>None</code> <code>zarr_format</code> <code>Literal[2, 3]</code> <p>The zarr specification to use when writing the zarr. Defaults to 2.</p> <code>2</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the position prop is given and is not present on all nodes.</p>"},{"location":"reference/geff/metadata/","title":"geff.metadata","text":""},{"location":"reference/geff/metadata/#geff.metadata","title":"geff.metadata","text":""},{"location":"reference/geff/metadata/#geff.metadata.Axis","title":"Axis","text":"<p>               Bases: <code>BaseModel</code></p> <p>TODO docstring</p>"},{"location":"reference/geff/metadata/#geff.metadata.DisplayHint","title":"DisplayHint","text":"<p>               Bases: <code>BaseModel</code></p> <p>Metadata indicating how spatiotemporal axes are displayed by a viewer</p>"},{"location":"reference/geff/metadata/#geff.metadata.GeffMetadata","title":"GeffMetadata","text":"<p>               Bases: <code>BaseModel</code></p> <p>Geff metadata schema to validate the attributes json file in a geff zarr</p>"},{"location":"reference/geff/metadata/#geff.metadata.GeffMetadata.read","title":"read  <code>classmethod</code>","text":"<pre><code>read(store: StoreLike) -&gt; GeffMetadata\n</code></pre> <p>Helper function to read GeffMetadata from a zarr geff group.</p> <p>Parameters:</p> Name Type Description Default <code>store</code> <code>zarr store | Path | str</code> <p>The geff store to read the metadata from</p> required <p>Returns:</p> Name Type Description <code>GeffMetadata</code> <code>GeffMetadata</code> <p>The GeffMetadata object</p>"},{"location":"reference/geff/metadata/#geff.metadata.GeffMetadata.write","title":"write","text":"<pre><code>write(store: StoreLike) -&gt; None\n</code></pre> <p>Helper function to write GeffMetadata into the group of a zarr geff store. Maintains consistency by preserving ignored attributes with their original values.</p> <p>Parameters:</p> Name Type Description Default <code>store</code> <code>zarr store | Path | str</code> <p>The geff store to write the metadata to</p> required"},{"location":"reference/geff/metadata/#geff.metadata.PropMetadata","title":"PropMetadata","text":"<p>               Bases: <code>BaseModel</code></p> <p>Metadata describing a property in the geff graph.</p>"},{"location":"reference/geff/metadata/#geff.metadata.RelatedObject","title":"RelatedObject","text":"<p>               Bases: <code>BaseModel</code></p> <p>TODO docstring</p>"},{"location":"reference/geff/metadata/utils/","title":"geff.metadata.utils","text":""},{"location":"reference/geff/metadata/utils/#geff.metadata.utils","title":"geff.metadata.utils","text":""},{"location":"reference/geff/metadata/utils/#geff.metadata.utils.create_or_update_metadata","title":"create_or_update_metadata","text":"<pre><code>create_or_update_metadata(\n    metadata: GeffMetadata | None,\n    is_directed: bool,\n    axes: Any,\n) -&gt; GeffMetadata\n</code></pre> <p>Create new metadata or update existing metadata with axes, version, and directedness.</p> <p>Parameters:</p> Name Type Description Default <code>metadata</code> <code>GeffMetadata | None</code> <p>Existing metadata object or None</p> required <code>is_directed</code> <code>bool</code> <p>Whether the graph is directed</p> required <code>axes</code> <code>Any</code> <p>The axes object to set</p> required <p>Returns:</p> Type Description <code>GeffMetadata</code> <p>Updated or new GeffMetadata object</p>"},{"location":"reference/geff/metadata/utils/#geff.metadata.utils.create_or_update_props_metadata","title":"create_or_update_props_metadata","text":"<pre><code>create_or_update_props_metadata(\n    metadata: GeffMetadata,\n    props_md: Sequence[PropMetadata],\n    c_type: Literal[\"node\", \"edge\"],\n) -&gt; GeffMetadata\n</code></pre> <p>Create new props metadata or update existing metadata with new props metadata.</p> <p>Parameters:</p> Name Type Description Default <code>metadata</code> <code>GeffMetadata</code> <p>Existing metadata object</p> required <code>props_md</code> <code>Sequence[PropMetadata]</code> <p>The props metadata to add to the metadata.</p> required <code>c_type</code> <code>Literal['node', 'edge']</code> <p>The type of the props metadata.</p> required <p>Returns:</p> Type Description <code>GeffMetadata</code> <p>GeffMetadata object with updated props metadata.</p> Warning <p>If a key in props_md already exists in the properties metadata, it will be overwritten.</p>"},{"location":"reference/geff/metadata/utils/#geff.metadata.utils.get_graph_existing_metadata","title":"get_graph_existing_metadata","text":"<pre><code>get_graph_existing_metadata(\n    metadata: GeffMetadata | None = None,\n    axis_names: list[str] | None = None,\n    axis_units: list[str | None] | None = None,\n    axis_types: list[str | None] | None = None,\n) -&gt; tuple[\n    list[str] | None,\n    list[str | None] | None,\n    list[str | None] | None,\n]\n</code></pre> <p>Get the existing metadata from a graph.</p> <p>If axis lists are provided, they will override the graph properties and metadata. If metadata is provided, it will override the graph properties. If neither are provided, the graph properties will be used.</p> <p>Parameters:</p> Name Type Description Default <code>metadata</code> <code>GeffMetadata | None</code> <p>The metadata of the graph. Defaults to None.</p> <code>None</code> <code>axis_names</code> <code>list[str] | None</code> <p>The names of the spatial dims. Defaults to None.</p> <code>None</code> <code>axis_units</code> <code>list[str | None] | None</code> <p>The units of the spatial dims. Defaults to None.</p> <code>None</code> <code>axis_types</code> <code>list[str | None] | None</code> <p>The types of the spatial dims. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <code>tuple[list[str] | None, list[str | None] | None, list[str | None] | None]</code> <p>tuple[list[str] | None, list[str | None] | None, list[str | None] | None]: A tuple with the names of the spatial dims, the units of the spatial dims, and the types of the spatial dims. None if not provided.</p>"},{"location":"reference/geff/testing/","title":"geff.testing","text":""},{"location":"reference/geff/testing/#geff.testing","title":"geff.testing","text":""},{"location":"reference/geff/testing/data/","title":"geff.testing.data","text":""},{"location":"reference/geff/testing/data/#geff.testing.data","title":"geff.testing.data","text":"<p>Test data generation utilities for geff graphs.</p> <p>This module provides functions to create mock geff graphs for testing and development. It includes both simple convenience functions and a comprehensive function for advanced use cases.</p> <p>Examples:</p>"},{"location":"reference/geff/testing/data/#geff.testing.data--simple-2d-graph-with-defaults","title":"Simple 2D graph with defaults","text":"<pre><code>&gt;&gt;&gt; store, props = create_simple_2d_geff()\n&gt;&gt;&gt; # Creates: 10 nodes, 15 edges, undirected, 2D (x, y, t)\n</code></pre>"},{"location":"reference/geff/testing/data/#geff.testing.data--simple-3d-graph-with-custom-size","title":"Simple 3D graph with custom size","text":"<pre><code>&gt;&gt;&gt; store, props = create_simple_3d_geff(num_nodes=20, num_edges=30)\n&gt;&gt;&gt; # Creates: 20 nodes, 30 edges, undirected, 3D (x, y, z, t)\n</code></pre>"},{"location":"reference/geff/testing/data/#geff.testing.data--advanced-usage-with-full-control","title":"Advanced usage with full control","text":"<pre><code>&gt;&gt;&gt; store, props = create_memory_mock_geff(\n...     node_id_dtype=\"int\",\n...     node_axis_dtypes={\"position\": \"float64\", \"time\": \"float32\"},\n...     directed=True,\n...     num_nodes=5,\n...     num_edges=8,\n...     extra_node_props={\"label\": \"str\", \"confidence\": \"float64\"},\n...     extra_edge_props={\"score\": \"float64\", \"color\": \"uint8\",\n...           \"weight\": \"float64\", \"type\": \"str\"},\n...     include_t=True,\n...     include_z=False,  # 2D only\n...     include_y=True,\n...     include_x=True,\n... )\n</code></pre>"},{"location":"reference/geff/testing/data/#geff.testing.data--advanced-usage-with-custom-arrays","title":"Advanced usage with custom arrays","text":"<pre><code>&gt;&gt;&gt; import numpy as np\n&gt;&gt;&gt; custom_labels = np.array([\"A\", \"B\", \"C\", \"D\", \"E\"])\n&gt;&gt;&gt; custom_scores = np.array([0.1, 0.5, 0.8, 0.3, 0.9])\n&gt;&gt;&gt; custom_edge_weights = np.array([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8])\n&gt;&gt;&gt; store, props = create_memory_mock_geff(\n...     node_id_dtype=\"int\",\n...     node_axis_dtypes={\"position\": \"float64\", \"time\": \"float64\"},\n...     directed=False,\n...     num_nodes=5,\n...     num_edges=8,\n...     extra_node_props={\"label\": custom_labels, \"score\": custom_scores,\n...         \"confidence\": \"float64\"},\n...     extra_edge_props={\"weight\": custom_edge_weights, \"type\": \"str\"},\n...     include_t=True,\n...     include_z=False,\n...     include_y=True,\n...     include_x=True,\n... )\n</code></pre>"},{"location":"reference/geff/testing/data/#geff.testing.data--using-with-geffreader","title":"Using with GeffReader","text":"<pre><code>&gt;&gt;&gt; from geff import GeffReader\n&gt;&gt;&gt; store, props = create_simple_2d_geff()\n&gt;&gt;&gt; reader = GeffReader(store)\n&gt;&gt;&gt; graph = reader.read_nx()\n&gt;&gt;&gt; # graph is a networkx Graph ready for analysis\n</code></pre>"},{"location":"reference/geff/testing/data/#geff.testing.data.create_dummy_graph_props","title":"create_dummy_graph_props","text":"<pre><code>create_dummy_graph_props(\n    node_id_dtype: NodeIdDTypeStr,\n    node_axis_dtypes: ExampleNodeAxisPropsDtypes,\n    directed: bool,\n    num_nodes: int = 5,\n    num_edges: int = 4,\n    extra_node_props: dict[str, DTypeStr | NDArray[Any]]\n    | None = None,\n    extra_edge_props: dict[str, DTypeStr | NDArray[Any]]\n    | None = None,\n    include_t: bool = True,\n    include_z: bool = True,\n    include_y: bool = True,\n    include_x: bool = True,\n) -&gt; GraphAttrs\n</code></pre> <p>Create dummy graph properties for testing.</p> <p>Parameters:</p> Name Type Description Default <code>node_id_dtype</code> <code>NodeIdDTypeStr</code> <p>Data type for node IDs</p> required <code>node_axis_dtypes</code> <code>ExampleNodeAxisPropsDtypes</code> <p>Dictionary specifying dtypes for node axis properties (space and time)</p> required <code>directed</code> <code>bool</code> <p>Whether the graph is directed</p> required <code>num_nodes</code> <code>int</code> <p>Number of nodes to generate</p> <code>5</code> <code>num_edges</code> <code>int</code> <p>Number of edges to generate</p> <code>4</code> <code>extra_node_props</code> <code>dict[str, DTypeStr | NDArray[Any]] | None</code> <p>Dict mapping property names to dtypes for extra node properties</p> <code>None</code> <code>extra_edge_props</code> <code>dict[str, DTypeStr | NDArray[Any]] | None</code> <p>Dict mapping property names to dtypes for extra edge properties</p> <code>None</code> <code>include_t</code> <code>bool</code> <p>Whether to include time dimension</p> <code>True</code> <code>include_z</code> <code>bool</code> <p>Whether to include z dimension</p> <code>True</code> <code>include_y</code> <code>bool</code> <p>Whether to include y dimension</p> <code>True</code> <code>include_x</code> <code>bool</code> <p>Whether to include x dimension</p> <code>True</code> <p>Returns:</p> Type Description <code>GraphAttrs</code> <p>Dictionary containing all graph properties</p>"},{"location":"reference/geff/testing/data/#geff.testing.data.create_memory_mock_geff","title":"create_memory_mock_geff","text":"<pre><code>create_memory_mock_geff(\n    node_id_dtype: NodeIdDTypeStr,\n    node_axis_dtypes: ExampleNodeAxisPropsDtypes,\n    directed: bool,\n    num_nodes: int = 5,\n    num_edges: int = 4,\n    extra_node_props: dict[str, DTypeStr | NDArray[Any]]\n    | None = None,\n    extra_edge_props: dict[str, DTypeStr | NDArray[Any]]\n    | None = None,\n    include_t: bool = True,\n    include_z: bool = True,\n    include_y: bool = True,\n    include_x: bool = True,\n) -&gt; tuple[zarr.storage.MemoryStore, GraphAttrs]\n</code></pre> <p>Create a mock geff graph in memory and return the zarr store and graph properties.</p> <p>Parameters:</p> Name Type Description Default <code>node_id_dtype</code> <code>NodeIdDTypeStr</code> <p>Data type for node IDs</p> required <code>node_axis_dtypes</code> <code>ExampleNodeAxisPropsDtypes</code> <p>Dictionary specifying dtypes for node axis properties (space and time)</p> required <code>directed</code> <code>bool</code> <p>Whether the graph is directed</p> required <code>num_nodes</code> <code>int</code> <p>Number of nodes to generate</p> <code>5</code> <code>num_edges</code> <code>int</code> <p>Number of edges to generate</p> <code>4</code> <code>extra_node_props</code> <code>dict[str, DTypeStr | NDArray[Any]] | None</code> <p>Dict mapping property names to dtypes for extra node properties</p> <code>None</code> <code>extra_edge_props</code> <code>dict[str, DTypeStr | NDArray[Any]] | None</code> <p>Dict mapping property names to dtypes for extra edge properties</p> <code>None</code> <code>include_t</code> <code>bool</code> <p>Whether to include time dimension</p> <code>True</code> <code>include_z</code> <code>bool</code> <p>Whether to include z dimension</p> <code>True</code> <code>include_y</code> <code>bool</code> <p>Whether to include y dimension</p> <code>True</code> <code>include_x</code> <code>bool</code> <p>Whether to include x dimension</p> <code>True</code> <p>Returns:</p> Type Description <code>tuple[MemoryStore, GraphAttrs]</code> <p>Tuple of (zarr store in memory, graph properties dictionary)</p>"},{"location":"reference/geff/testing/data/#geff.testing.data.create_simple_2d_geff","title":"create_simple_2d_geff","text":"<pre><code>create_simple_2d_geff(\n    num_nodes: int = 10,\n    num_edges: int = 15,\n    directed: bool = False,\n) -&gt; tuple[zarr.storage.MemoryStore, GraphAttrs]\n</code></pre> <p>Create a simple 2D geff graph with default settings.</p> <p>This is a convenience function for creating basic 2D graphs without having to specify all the detailed parameters. Uses sensible defaults for common use cases.</p> <p>Parameters:</p> Name Type Description Default <code>num_nodes</code> <code>int</code> <p>Number of nodes to generate (default: 10)</p> <code>10</code> <code>num_edges</code> <code>int</code> <p>Number of edges to generate (default: 15)</p> <code>15</code> <code>directed</code> <code>bool</code> <p>Whether the graph is directed (default: False)</p> <code>False</code> <p>Returns:</p> Type Description <code>tuple[MemoryStore, GraphAttrs]</code> <p>Tuple of (zarr store in memory, graph properties dictionary)</p> <p>Examples:</p> <p>Basic usage with defaults:     &gt;&gt;&gt; store, props = create_simple_2d_geff()     &gt;&gt;&gt; # store is a zarr.MemoryStore with 10 nodes, 15 edges</p> <p>Custom graph size:     &gt;&gt;&gt; store, props = create_simple_2d_geff(num_nodes=5, num_edges=8)     &gt;&gt;&gt; # store has 5 nodes, 8 edges</p> <p>Directed graph:     &gt;&gt;&gt; store, props = create_simple_2d_geff(directed=True)     &gt;&gt;&gt; # Creates a directed graph</p> <p>Using with GeffReader:     &gt;&gt;&gt; store, props = create_simple_2d_geff()     &gt;&gt;&gt; reader = GeffReader(store)     &gt;&gt;&gt; graph = reader.read_nx()     &gt;&gt;&gt; # graph is a networkx Graph with 2D spatial data (x, y, t)</p>"},{"location":"reference/geff/testing/data/#geff.testing.data.create_simple_3d_geff","title":"create_simple_3d_geff","text":"<pre><code>create_simple_3d_geff(\n    num_nodes: int = 10,\n    num_edges: int = 15,\n    directed: bool = False,\n) -&gt; tuple[zarr.storage.MemoryStore, GraphAttrs]\n</code></pre> <p>Create a simple 3D geff graph with default settings.</p> <p>This is a convenience function for creating basic 3D graphs without having to specify all the detailed parameters. Uses sensible defaults for common use cases.</p> <p>Parameters:</p> Name Type Description Default <code>num_nodes</code> <code>int</code> <p>Number of nodes to generate (default: 10)</p> <code>10</code> <code>num_edges</code> <code>int</code> <p>Number of edges to generate (default: 15)</p> <code>15</code> <code>directed</code> <code>bool</code> <p>Whether the graph is directed (default: False)</p> <code>False</code> <p>Returns:</p> Type Description <code>tuple[MemoryStore, GraphAttrs]</code> <p>Tuple of (zarr store in memory, graph properties dictionary)</p> <p>Examples:</p> <p>Basic usage with defaults:     &gt;&gt;&gt; store, props = create_simple_3d_geff()     &gt;&gt;&gt; # store is a zarr.MemoryStore with 10 nodes, 15 edges</p> <p>Custom graph size:     &gt;&gt;&gt; store, props = create_simple_3d_geff(num_nodes=5, num_edges=8)     &gt;&gt;&gt; # store has 5 nodes, 8 edges</p> <p>Directed graph:     &gt;&gt;&gt; store, props = create_simple_3d_geff(directed=True)     &gt;&gt;&gt; # Creates a directed graph</p> <p>Using with GeffReader:     &gt;&gt;&gt; store, props = create_simple_3d_geff()     &gt;&gt;&gt; reader = GeffReader(store)     &gt;&gt;&gt; graph = reader.read_nx()     &gt;&gt;&gt; # graph is a networkx Graph with 3D spatial data (x, y, z, t)</p> <p>Accessing spatial coordinates:     &gt;&gt;&gt; store, props = create_simple_3d_geff()     &gt;&gt;&gt; reader = GeffReader(store)     &gt;&gt;&gt; graph = reader.read_nx()     &gt;&gt;&gt; # Each node has x, y, z, t coordinates     &gt;&gt;&gt; node_data = graph.nodes[0]     &gt;&gt;&gt; x, y, z, t = node_data['x'], node_data['y'], node_data['z'], node_data['t']</p>"},{"location":"reference/geff/testing/data/#geff.testing.data.create_simple_temporal_geff","title":"create_simple_temporal_geff","text":"<pre><code>create_simple_temporal_geff(\n    num_nodes: int = 10,\n    num_edges: int = 15,\n    directed: bool = False,\n) -&gt; tuple[zarr.storage.MemoryStore, GraphAttrs]\n</code></pre> <p>Create a simple geff graph with only time dimension (no spatial dimensions).</p> <p>This function creates a graph with nodes, edges, and time coordinates, but no spatial dimensions (x, y, z). Useful for temporal-only analysis.</p> <p>Parameters:</p> Name Type Description Default <code>num_nodes</code> <code>int</code> <p>Number of nodes to generate (default: 10)</p> <code>10</code> <code>num_edges</code> <code>int</code> <p>Number of edges to generate (default: 15)</p> <code>15</code> <code>directed</code> <code>bool</code> <p>Whether the graph is directed (default: False)</p> <code>False</code> <p>Returns:</p> Type Description <code>tuple[MemoryStore, GraphAttrs]</code> <p>Tuple of (zarr store in memory, graph properties dictionary)</p> <p>Examples:</p> <p>Basic usage with defaults:     &gt;&gt;&gt; store, props = create_simple_temporal_geff()     &gt;&gt;&gt; # store is a zarr.MemoryStore with 10 nodes, 15 edges, time only</p> <p>Custom graph size:     &gt;&gt;&gt; store, props = create_simple_temporal_geff(num_nodes=5, num_edges=8)     &gt;&gt;&gt; # store has 5 nodes, 8 edges, time only</p> <p>Using with GeffReader:     &gt;&gt;&gt; store, props = create_simple_temporal_geff()     &gt;&gt;&gt; reader = GeffReader(store)     &gt;&gt;&gt; graph = reader.read_nx()     &gt;&gt;&gt; # graph is a networkx Graph with only time data     &gt;&gt;&gt; # Each node has only 't' coordinate, no x, y, z</p>"},{"location":"reference/geff/validate/","title":"geff.validate","text":""},{"location":"reference/geff/validate/#geff.validate","title":"geff.validate","text":""},{"location":"reference/geff/validate/graph/","title":"geff.validate.graph","text":""},{"location":"reference/geff/validate/graph/#geff.validate.graph","title":"geff.validate.graph","text":""},{"location":"reference/geff/validate/graph/#geff.validate.graph.validate_no_repeated_edges","title":"validate_no_repeated_edges","text":"<pre><code>validate_no_repeated_edges(\n    edge_ids: ArrayLike,\n) -&gt; tuple[bool, np.ndarray]\n</code></pre> <p>Validates that there are no repeated edges in the array.</p> <p>Parameters:</p> Name Type Description Default <code>edge_ids</code> <code>ArrayLike</code> <p>2D array-like of edges with shape (M, 2). Each row is (source, target).</p> required <p>Returns:</p> Name Type Description <code>tuple</code> <code>tuple[bool, ndarray]</code> <p>A tuple (is_valid, repeated_edges) where: - is_valid (bool): True if there are no repeated edges, False otherwise. - repeated_edges (np.ndarray): An array of duplicated edges. Empty if valid.</p>"},{"location":"reference/geff/validate/graph/#geff.validate.graph.validate_no_self_edges","title":"validate_no_self_edges","text":"<pre><code>validate_no_self_edges(\n    edge_ids: ArrayLike,\n) -&gt; tuple[bool, np.ndarray]\n</code></pre> <p>Validates that there are no self-edges in the provided array of edges.</p> <p>Parameters:</p> Name Type Description Default <code>edge_ids</code> <code>ArrayLike</code> <p>2D array-like of edges with shape (M, 2). Each row is (source, target).</p> required <p>Returns:</p> Type Description <code>tuple[bool, ndarray]</code> <p>tuple[bool, np.ndarray]: A tuple (is_valid, problematic_nodes) where: - is_valid (bool): True if no node has an edge to itself, False otherwise. - problematic_nodes (np.ndarray): Array of node IDs that have self-edges.   Empty if valid.</p>"},{"location":"reference/geff/validate/graph/#geff.validate.graph.validate_nodes_for_edges","title":"validate_nodes_for_edges","text":"<pre><code>validate_nodes_for_edges(\n    node_ids: ArrayLike, edge_ids: ArrayLike\n) -&gt; tuple[bool, list[tuple[int, int]]]\n</code></pre> <p>Validates that all edges in <code>edge_ids</code> reference node IDs present in <code>node_ids</code>.</p> <p>This function checks whether each edge in <code>edge_ids</code> consists of node IDs that exist in <code>node_ids</code>. It returns a boolean indicating whether all edges are valid, and a list of invalid edges.</p> <p>Parameters:</p> Name Type Description Default <code>node_ids</code> <code>ArrayLike</code> <p>1D array-like of valid node IDs (integers).</p> required <code>edge_ids</code> <code>ArrayLike</code> <p>2D array-like of edges with shape (M, 2), where each row is (source, target).</p> required <p>Returns:</p> Type Description <code>tuple[bool, list[tuple[int, int]]]</code> <p>tuple[bool, list[tuple[int, int]]]: - all_edges_valid (bool): True if all edges reference valid node IDs. - invalid_edges (list of tuple[int, int]): List of (source, target) pairs for   invalid edges.</p>"},{"location":"reference/geff/validate/segmentation/","title":"geff.validate.segmentation","text":""},{"location":"reference/geff/validate/segmentation/#geff.validate.segmentation","title":"geff.validate.segmentation","text":""},{"location":"reference/geff/validate/segmentation/#geff.validate.segmentation.axes_match_seg_dims","title":"axes_match_seg_dims","text":"<pre><code>axes_match_seg_dims(\n    store: str | Path | StoreLike, segmentation: ArrayLike\n) -&gt; tuple[bool, list[str]]\n</code></pre> <p>Validate that geff axes metadata have the same number of dimensions as the segmentation data.</p> <p>Parameters:</p> Name Type Description Default <code>store</code> <code>(DirectoryStore, MemoryStore)</code> <p>A Zarr store or a path to one.</p> required <code>segmentation</code> <code>ArrayLike</code> <p>a 3D or 4D segmentation array (t, (z), y, x).</p> required <p>Returns:</p> Type Description <code>bool</code> <p>tuple (bool, list[str])</p> <code>list[str]</code> <p>True if all checks passed</p> <code>tuple[bool, list[str]]</code> <p>False if the store does not provide metadata or if the number of dimensions in the</p> <code>tuple[bool, list[str]]</code> <p>metadata does not match that of the segmentation.</p> <code>tuple[bool, list[str]]</code> <p>A list of length 0 or 1 with the encountered error, if any.</p>"},{"location":"reference/geff/validate/segmentation/#geff.validate.segmentation.graph_is_in_seg_bounds","title":"graph_is_in_seg_bounds","text":"<pre><code>graph_is_in_seg_bounds(\n    store: str | Path | StoreLike,\n    segmentation: ArrayLike,\n    scale: Sequence[float] | None = None,\n) -&gt; tuple[bool, list[str]]\n</code></pre> <p>Validate that geff axes metadata have the same number of dimensions as the segmentation data.</p> <p>Parameters:</p> Name Type Description Default <code>store</code> <code>(DirectoryStore, MemoryStore)</code> <p>A geff zarr store or a path to one.</p> required <code>segmentation</code> <code>ArrayLike</code> <p>a 3D or 4D segmentation array (t, (z), y, x).</p> required <code>scale</code> <code>tuple[float] | list[float] | None = None</code> <p>optional scaling tuple, with the same length as the number of dimensions in the segmentation data.</p> <code>None</code> <p>Returns:</p> Type Description <code>bool</code> <p>tuple (bool, list[str])</p> <code>list[str]</code> <p>True if all checks passed</p> <code>tuple[bool, list[str]]</code> <p>False if the store does not provide metadata, if the provided scale tuple does not have the same length as the number of dimensions in the segmentation, if the number of dimensions in the metadata does not match that of the segmentation, or if the (scaled) graph data is not within the segmentation bounds.</p> <code>tuple[bool, list[str]]</code> <p>A list of length 0 or 1 with the encountered error, if any.</p>"},{"location":"reference/geff/validate/segmentation/#geff.validate.segmentation.has_seg_ids_at_coords","title":"has_seg_ids_at_coords","text":"<pre><code>has_seg_ids_at_coords(\n    segmentation: ArrayLike,\n    coords: Sequence[Sequence[int]],\n    seg_ids: Sequence[int],\n    scale: Sequence[float] | None = None,\n) -&gt; tuple[bool, list[str]]\n</code></pre> <p>Validates that the pixels at given coordinates in the segmentation have a value equal   to the provided seg_ids.</p> <p>Parameters:</p> Name Type Description Default <code>segmentation</code> <code>ArrayLike</code> <p>a 3D or 4D segmentation array (t, (z), y, x).</p> required <code>coords</code> <code>Sequence[Sequence[int]]</code> <p>Sequence of t(z)yx coordinates, should have the same order as the segmentation dimensions.</p> required <code>seg_ids</code> <code>Sequence[int]</code> <p>Sequence of corresponding seg_ids to check.</p> required <code>scale</code> <code>Sequence[float] | None = None</code> <p>optional scaling tuple, with the same length as the number of dimensions in the segmentation data.</p> <code>None</code> <p>Returns:</p> Type Description <code>bool</code> <p>tuple[bool, list[str]]:</p> <code>list[str]</code> <p>True if all checks pass, False if an error was encountered or if there is no</p> <code>tuple[bool, list[str]]</code> <p>match.</p> <code>tuple[bool, list[str]]</code> <p>A list of encountered errors (can be of length 1 when returning early).</p>"},{"location":"reference/geff/validate/segmentation/#geff.validate.segmentation.has_seg_ids_at_time_points","title":"has_seg_ids_at_time_points","text":"<pre><code>has_seg_ids_at_time_points(\n    segmentation: ArrayLike,\n    time_points: Sequence[int],\n    seg_ids: Sequence[int],\n    store: str | Path | StoreLike | None = None,\n) -&gt; tuple[bool, list[str]]\n</code></pre> <p>Validates that labels with given seg_ids exist at time points t. If a store is provided, the time axis will be identified by the metadata using the 'type' key. If this is not possible, it is assumed that time is on axis 0.</p> <p>Parameters:</p> Name Type Description Default <code>segmentation</code> <code>ArrayLike</code> <p>a 3D or 4D segmentation array (t, (z), y, x).</p> required <code>time_points</code> <code>Sequence[int]</code> <p>Sequence of time points to check.</p> required <code>seg_ids</code> <code>Sequence[int]</code> <p>Sequence of seg_ids to check.</p> required <code>store</code> <code>DirectoryStore, MemoryStore, | None = None</code> <p>Optional geff Zarr store or a path to one. If provided, it will attempt to read the axis order from the metadata. Otherwise, it is assumed that the dimension order is t(z)yx.</p> <code>None</code> <p>Returns:</p> Type Description <code>bool</code> <p>tuple (bool, list[str])</p> <code>list[str]</code> <p>True if all seg_ids are present at their respective time points, False if an</p> <code>tuple[bool, list[str]]</code> <p>Index error is encountered or if there are any missing labels.</p> <code>tuple[bool, list[str]]</code> <p>A list of encountered errors (can be of length 1 when returning early).</p>"},{"location":"reference/geff/validate/segmentation/#geff.validate.segmentation.has_valid_seg_id","title":"has_valid_seg_id","text":"<pre><code>has_valid_seg_id(\n    store: StoreLike, seg_id: str = \"seg_id\"\n) -&gt; tuple[bool, list[str]]\n</code></pre> <p>Validate that all nodes in the geff have a property 'seg_id', that is of type integer.</p> <p>Parameters:</p> Name Type Description Default <code>store</code> <code>(DirectoryStore, MemoryStore)</code> <p>A Zarr store or a path to one.</p> required <code>seg_id</code> <code>str</code> <p>the key to the dataset storing the segmentation value.</p> <code>'seg_id'</code> <p>Returns:</p> Type Description <code>bool</code> <p>tuple (bool, list[str])</p> <code>list[str]</code> <p>True if the checks passed, False if validation failed due to missing data or</p> <code>tuple[bool, list[str]]</code> <p>non-integer seg_ids.</p> <code>tuple[bool, list[str]]</code> <p>A list of encountered errors.</p>"},{"location":"reference/geff/validate/structure/","title":"geff.validate.structure","text":""},{"location":"reference/geff/validate/structure/#geff.validate.structure","title":"geff.validate.structure","text":""},{"location":"reference/geff/validate/structure/#geff.validate.structure.validate_structure","title":"validate_structure","text":"<pre><code>validate_structure(store: StoreLike) -&gt; None\n</code></pre> <p>Ensure that the structure of the zarr conforms to geff specification</p> <p>Parameters:</p> Name Type Description Default <code>store</code> <code>str | Path | zarr store</code> <p>Check the geff zarr, either str/Path/store</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>If geff specs are violated</p> <code>FileNotFoundError</code> <p>If store is not a valid zarr store or path doesn't exist</p>"},{"location":"reference/geff/validate/tracks/","title":"geff.validate.tracks","text":""},{"location":"reference/geff/validate/tracks/#geff.validate.tracks","title":"geff.validate.tracks","text":""},{"location":"reference/geff/validate/tracks/#geff.validate.tracks.validate_lineages","title":"validate_lineages","text":"<pre><code>validate_lineages(\n    node_ids: ArrayLike,\n    edge_ids: ArrayLike,\n    lineage_ids: ArrayLike,\n) -&gt; tuple[bool, list[str]]\n</code></pre> <p>Validates if each lineage is a valid, isolated connected component.</p> <p>A lineage is considered valid if and only if the set of nodes belonging to it is identical to one of the graph's weakly connected components. This efficiently ensures both internal connectivity and external isolation.</p> <p>Parameters:</p> Name Type Description Default <code>node_ids</code> <code>ArrayLike</code> <p>A sequence of unique node identifiers in the graph.</p> required <code>edge_ids</code> <code>ArrayLike</code> <p>A sequence of (source, target) pairs representing directed edges.</p> required <code>lineage_ids</code> <code>ArrayLike</code> <p>A sequence of lineage identifiers corresponding to each node in <code>node_ids</code>.</p> required <p>Returns:</p> Type Description <code>tuple[bool, list[str]]</code> <p>A tuple containing: - is_valid (bool): True if all lineages are valid connected   components, False otherwise. - errors (list[str]): A list of error messages for each invalid   lineage.</p>"},{"location":"reference/geff/validate/tracks/#geff.validate.tracks.validate_tracklets","title":"validate_tracklets","text":"<pre><code>validate_tracklets(\n    node_ids: ArrayLike,\n    edge_ids: ArrayLike,\n    tracklet_ids: ArrayLike,\n) -&gt; tuple[bool, list[str]]\n</code></pre> <p>Validates if each tracklet forms a single, cycle-free path using NetworkX for improved performance.</p> <p>Parameters:</p> Name Type Description Default <code>node_ids</code> <code>ArrayLike</code> <p>Sequence of node identifiers.</p> required <code>edge_ids</code> <code>ArrayLike</code> <p>Sequence of edges as (source, target) node ID pairs. Edges must be between nodes in <code>node_ids</code>.</p> required <code>tracklet_ids</code> <code>ArrayLike</code> <p>Sequence of tracklet IDs corresponding to each node.</p> required <p>Returns:</p> Type Description <code>tuple[bool, list[str]]</code> <p>tuple[bool, list[str]]: - is_valid (bool): True if all tracklets are valid, otherwise False. - errors (list[str]): List of error messages for invalid tracklets.</p>"}]}