{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to geff!","text":"<p>geff is a specification for a file format for exchanging spatial graph data. It is not intended to be mutable, editable, chunked, or optimized for use in an application setting.</p> <p>geff is the specification of the file format, but the library also includes implementations for writing from and reading to a networkx graph, a common Python in-memory graph data structure. The library uses semantic versioning, where changes to the specification bump the major or minor versions, and bugfixes for the example implementation bumps the patch version.</p> <p>Learn more in the documentation or check out the source code.</p>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install geff\n</code></pre>"},{"location":"api/","title":"API Docs","text":""},{"location":"api/#networkx-backend","title":"Networkx Backend","text":""},{"location":"api/#geff.read_nx","title":"geff.read_nx","text":"<pre><code>read_nx(\n    path: Path | str,\n    validate: bool = True,\n    node_props: list[str] | None = None,\n    edge_props: list[str] | None = None,\n) -&gt; tuple[nx.Graph, GeffMetadata]\n</code></pre> <p>Read a geff file into a networkx graph. Metadata properties will be stored in the graph properties, accessed via <code>G.graph[key]</code> where G is a networkx graph.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>Path | str</code> <p>The path to the root of the geff zarr, where the .attrs contains the geff  metadata</p> required <code>validate</code> <code>bool</code> <p>Flag indicating whether to perform validation on the geff file before loading into memory. If set to False and there are format issues, will likely fail with a cryptic error. Defaults to True.</p> <code>True</code> <code>node_props</code> <code>list of str</code> <p>The names of the node properties to load, if None all properties will be loaded, defaults to None.</p> <code>None</code> <code>edge_props</code> <code>list of str</code> <p>The names of the edge properties to load, if None all properties will be loaded, defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <code>tuple[Graph, GeffMetadata]</code> <p>A networkx graph containing the graph that was stored in the geff file format</p>"},{"location":"api/#geff.write_nx","title":"geff.write_nx","text":"<pre><code>write_nx(\n    graph: Graph,\n    path: str | Path,\n    metadata: GeffMetadata | None = None,\n    axis_names: list[str] | None = None,\n    axis_units: list[str | None] | None = None,\n    axis_types: list[str | None] | None = None,\n    zarr_format: Literal[2, 3] | None = 2,\n)\n</code></pre> <p>Write a networkx graph to the geff file format</p> <p>Parameters:</p> Name Type Description Default <code>graph</code> <code>Graph</code> <p>A networkx graph</p> required <code>path</code> <code>str | Path</code> <p>The path to the output zarr. Opens in append mode, so will only overwrite geff-controlled groups.</p> required <code>metadata</code> <code>GeffMetadata</code> <p>The original metadata of the graph. Defaults to None. If provided, will override the graph properties.</p> <code>None</code> <code>axis_names</code> <code>Optional[list[str]]</code> <p>The names of the spatial dims represented in position property. Defaults to None. Will override both value in graph properties and metadata if provided.</p> <code>None</code> <code>axis_units</code> <code>Optional[list[str]]</code> <p>The units of the spatial dims represented in position property. Defaults to None. Will override value both value in graph properties and metadata if provided.</p> <code>None</code> <code>axis_types</code> <code>Optional[list[str]]</code> <p>The types of the spatial dims represented in position property. Usually one of \"time\", \"space\", or \"channel\". Defaults to None. Will override both value in graph properties and metadata if provided.</p> <code>None</code> <code>zarr_format</code> <code>int</code> <p>The version of zarr to write. Defaults to 2.</p> <code>2</code>"},{"location":"api/#utilities","title":"Utilities","text":""},{"location":"api/#geff.validate","title":"geff.validate","text":"<pre><code>validate(path: str | Path)\n</code></pre> <p>Check that the structure of the zarr conforms to geff specification</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str | Path</code> <p>Path to geff zarr</p> required <p>Raises:</p> Type Description <code>AssertionError</code> <p>If geff specs are violated</p>"},{"location":"api/#metadata","title":"Metadata","text":""},{"location":"api/#geff.GeffMetadata","title":"geff.GeffMetadata","text":"<p>               Bases: <code>BaseModel</code></p> <p>Geff metadata schema to validate the attributes json file in a geff zarr</p>"},{"location":"api/#geff.GeffMetadata.read","title":"read  <code>classmethod</code>","text":"<pre><code>read(group: Group | Path) -&gt; GeffMetadata\n</code></pre> <p>Helper function to read GeffMetadata from a zarr geff group.</p> <p>Parameters:</p> Name Type Description Default <code>group</code> <code>Group | Path</code> <p>The zarr group containing the geff metadata</p> required <p>Returns:</p> Name Type Description <code>GeffMetadata</code> <code>GeffMetadata</code> <p>The GeffMetadata object</p>"},{"location":"api/#geff.GeffMetadata.write","title":"write","text":"<pre><code>write(group: Group | Path | str)\n</code></pre> <p>Helper function to write GeffMetadata into the zarr geff group.</p> <p>Parameters:</p> Name Type Description Default <code>group</code> <code>Group | Path</code> <p>The geff group to write the metadata to</p> required"},{"location":"api/#geff.metadata_schema.Axis","title":"geff.metadata_schema.Axis","text":"<p>               Bases: <code>BaseModel</code></p>"},{"location":"api/#geff.metadata_schema.axes_from_lists","title":"geff.metadata_schema.axes_from_lists","text":"<pre><code>axes_from_lists(\n    axis_names: Sequence[str] | None = None,\n    axis_units: Sequence[str | None] | None = None,\n    axis_types: Sequence[str | None] | None = None,\n    roi_min: Sequence[float | None] | None = None,\n    roi_max: Sequence[float | None] | None = None,\n) -&gt; list[Axis]\n</code></pre> <p>Create a list of Axes objects from lists of axis names, units, types, mins, and maxes. If axis_names is None, there are no spatial axes and the list will be empty. Nones for all other arguments will omit them from the axes.</p> <p>All provided arguments must have the same length. If an argument should not be specified for a single property, use None.</p> <p>Parameters:</p> Name Type Description Default <code>axis_names</code> <code>list[str] | None</code> <p>Names of properties for spatiotemporal axes. Defaults to None.</p> <code>None</code> <code>axis_units</code> <code>list[str | None] | None</code> <p>Units corresponding to named properties. Defaults to None.</p> <code>None</code> <code>axis_types</code> <code>list[str | None] | None</code> <p>Axis type for each property. Choose from \"space\", \"time\", \"channel\". Defaults to None.</p> <code>None</code> <code>roi_min</code> <code>list[float | None] | None</code> <p>Minimum value for each property. Defaults to None.</p> <code>None</code> <code>roi_max</code> <code>list[float | None] | None</code> <p>Maximum value for each property. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <code>list[Axis]</code> <p>list[Axis]:</p>"},{"location":"api/#units","title":"Units","text":""},{"location":"api/#geff.units.validate_axis_type","title":"geff.units.validate_axis_type","text":"<pre><code>validate_axis_type(axis_type: str) -&gt; bool\n</code></pre> <p>Validate axis type against standard list</p> <p>Parameters:</p> Name Type Description Default <code>axis_type</code> <code>str</code> <p>Axis type to check</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>False if the axis is not in valid types</p>"},{"location":"api/#geff.units.VALID_AXIS_TYPES","title":"geff.units.VALID_AXIS_TYPES  <code>module-attribute</code>","text":"<pre><code>VALID_AXIS_TYPES = ['space', 'time', 'channel']\n</code></pre>"},{"location":"api/#geff.units.validate_space_unit","title":"geff.units.validate_space_unit","text":"<pre><code>validate_space_unit(unit_name: str) -&gt; bool\n</code></pre> <p>Checks space unit against ome-zarr supported units</p> <p>Parameters:</p> Name Type Description Default <code>unit_name</code> <code>str</code> <p>Unit name to check</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if a space unit is a KNOWN valid unit.</p> <code>bool</code> <p>False if the unit is not known. The unit may be valid.</p>"},{"location":"api/#geff.units.VALID_SPACE_UNITS","title":"geff.units.VALID_SPACE_UNITS  <code>module-attribute</code>","text":"<pre><code>VALID_SPACE_UNITS = [\n    \"angstrom\",\n    \"attometer\",\n    \"centimeter\",\n    \"decimeter\",\n    \"exameter\",\n    \"femtometer\",\n    \"foot\",\n    \"gigameter\",\n    \"hectometer\",\n    \"inch\",\n    \"kilometer\",\n    \"megameter\",\n    \"meter\",\n    \"micrometer\",\n    \"mile\",\n    \"millimeter\",\n    \"nanometer\",\n    \"parsec\",\n    \"petameter\",\n    \"picometer\",\n    \"terameter\",\n    \"yard\",\n    \"yoctometer\",\n    \"yottameter\",\n    \"zeptometer\",\n    \"zettameter\",\n]\n</code></pre>"},{"location":"api/#geff.units.validate_time_unit","title":"geff.units.validate_time_unit","text":"<pre><code>validate_time_unit(unit_name: str) -&gt; bool\n</code></pre> <p>Check time unit against ome-zarr supported units</p> <p>Parameters:</p> Name Type Description Default <code>unit_name</code> <code>str</code> <p>Unit name to check</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if a time unit is a KNOWN valid unit.</p> <code>bool</code> <p>False if the unit is not known. The unit may be valid.</p>"},{"location":"api/#geff.units.VALID_TIME_UNITS","title":"geff.units.VALID_TIME_UNITS  <code>module-attribute</code>","text":"<pre><code>VALID_TIME_UNITS = [\n    \"attosecond\",\n    \"centisecond\",\n    \"day\",\n    \"decisecond\",\n    \"exasecond\",\n    \"femtosecond\",\n    \"gigasecond\",\n    \"hectosecond\",\n    \"hour\",\n    \"kilosecond\",\n    \"megasecond\",\n    \"microsecond\",\n    \"millisecond\",\n    \"minute\",\n    \"nanosecond\",\n    \"petasecond\",\n    \"picosecond\",\n    \"second\",\n    \"terasecond\",\n    \"yoctosecond\",\n    \"yottasecond\",\n    \"zeptosecond\",\n    \"zettasecond\",\n]\n</code></pre>"},{"location":"api/#writing-helpers","title":"Writing Helpers","text":""},{"location":"api/#geff.write_arrays.write_arrays","title":"geff.write_arrays.write_arrays","text":"<pre><code>write_arrays(\n    geff_path: Path | str,\n    node_ids: ndarray,\n    node_props: dict[str, tuple[ndarray, ndarray | None]]\n    | None,\n    edge_ids: ndarray,\n    edge_props: dict[str, tuple[ndarray, ndarray | None]]\n    | None,\n    metadata: GeffMetadata,\n    node_props_unsquish: dict[str, list[str]] | None = None,\n    edge_props_unsquish: dict[str, list[str]] | None = None,\n    zarr_format: Literal[2, 3] = 2,\n)\n</code></pre> <p>Write a geff file from already constructed arrays of node and edge ids and props</p> <p>Currently does not do any validation that the arrays are valid, but could be added as an optional flag.</p> <p>Parameters:</p> Name Type Description Default <code>geff_path</code> <code>Path | str</code> <p>The path to the zarr group where the graph will be written</p> required <code>node_ids</code> <code>ndarray</code> <p>An array containing the node ids. Must have same dtype as edge_ids.</p> required <code>node_props</code> <code>dict[str, tuple[ndarray, ndarray | None]] | None</code> <p>A dictionary from node property names to (values, missing) arrays, which should have same length as node_ids.</p> required <code>edge_ids</code> <code>ndarray</code> <p>An array containing the edge ids. Must have same dtype as node_ids.</p> required <code>edge_props</code> <code>dict[str, tuple[ndarray, ndarray | None]] | None</code> <p>A dictionary from edge property names to (values, missing) arrays, which should have same length as edge_ids.</p> required <code>metadata</code> <code>GeffMetadata</code> <p>The metadata of the graph.</p> required <code>zarr_format</code> <code>Literal[2, 3]</code> <p>The zarr specification to use when writing the zarr. Defaults to 2.</p> <code>2</code> <code>node_props_unsquish</code> <code>dict[str, list[str]] | None</code> <p>a dictionary indicication how to \"unsquish\" a property into individual scalars (e.g.: <code>{\"pos\": [\"z\", \"y\", \"x\"]}</code> will store the position property as three individual properties called \"z\", \"y\", and \"x\".</p> <code>None</code> <code>edge_props_unsquish</code> <code>dict[str, list[str]] | None</code> <p>a dictionary indicication how to \"unsquish\" a property into individual scalars (e.g.: <code>{\"pos\": [\"z\", \"y\", \"x\"]}</code> will store the position property as three individual properties called \"z\", \"y\", and \"x\".</p> <code>None</code>"},{"location":"specification/","title":"Geff specification","text":"<p>The graph exchange file format is <code>zarr</code> based. A graph is stored in a zarr group, which can have any name. This allows storing multiple <code>geff</code> graphs inside the same zarr root directory. A <code>geff</code> group is identified by the presence of a <code>geff</code> key in the <code>.zattrs</code>. Other <code>geff</code> metadata is also stored in the <code>.zattrs</code> file of the <code>geff</code> group, nested under the <code>geff</code> key. The <code>geff</code> group must contain a <code>nodes</code> group and an <code>edges</code> group (albeit both can be empty). <code>geff</code> graphs have the option to provide properties for <code>nodes</code> and <code>edges</code>.</p> <p><code>geff</code> graphs have the option to provide time and spatial dimensions as special attributes. These attributes are specified in the <code>axes</code> section of the metadata, inspired by the OME-zarr <code>axes</code> specification. </p>"},{"location":"specification/#zarr-specification","title":"Zarr specification","text":"<p>Currently, <code>geff</code> supports zarr specifications 2 and 3. However, <code>geff</code> will default to writing specification 2 because graphs written to the zarr v3 spec will not be compatible with all applications. When zarr 3 is more fully adopted by other libraries and tools, we will move to a zarr spec 3 default.</p>"},{"location":"specification/#geff-metadata","title":"Geff metadata geff Required  geff_version Required  directed Required  axes  Any of  name Required  type  Any of  unit  Any of  min  Any of  max  Any of","text":"GeffSchema Type: object root          geffgeff_metadataType: object <p>geff_metadata</p> root          geff geff_versionGeff VersionType: string <p>Geff version string following semantic versioning (MAJOR.MINOR.PATCH), optionally with .devN and/or +local parts (e.g., 0.3.1.dev6+g61d5f18). If not provided, the version will be set to the current geff package version.</p> Must match regular expression: <code>^\\d+\\.\\d+(?:\\.\\d+)?(?:\\.dev\\d+)?(?:\\+[a-zA-Z0-9]+)?</code> root          geff directedDirectedType: boolean root          geff axesAxes Default: null <ul><li> Option 1 </li><li> Option 2 </li></ul> root          geff axes anyOf item 0Type: array No Additional ItemsEach item of this array must be: root          geff axes anyOf item 0 AxisAxisType: object root          geff axes anyOf item 0 Axis nameNameType: string root          geff axes anyOf item 0 Axis typeType Default: null <ul><li> Option 1 </li><li> Option 2 </li></ul> root          geff axes anyOf item 0 Axis type anyOf item 0Type: string root          geff axes anyOf item 0 Axis type anyOf item 1Type: null root          geff axes anyOf item 0 Axis unitUnit Default: null <ul><li> Option 1 </li><li> Option 2 </li></ul> root          geff axes anyOf item 0 Axis unit anyOf item 0Type: string root          geff axes anyOf item 0 Axis unit anyOf item 1Type: null root          geff axes anyOf item 0 Axis minMin Default: null <ul><li> Option 1 </li><li> Option 2 </li></ul> root          geff axes anyOf item 0 Axis min anyOf item 0Type: number root          geff axes anyOf item 0 Axis min anyOf item 1Type: null root          geff axes anyOf item 0 Axis maxMax Default: null <ul><li> Option 1 </li><li> Option 2 </li></ul> root          geff axes anyOf item 0 Axis max anyOf item 0Type: number root          geff axes anyOf item 0 Axis max anyOf item 1Type: null root          geff axes anyOf item 1Type: null <p>Note</p> <p>The axes dictionary is modeled after the OME-zarr specifications and is used to identify spatio-temporal properties on the graph nodes. If the same names are used in the axes metadata of the related image or segmentation data, applications can use this information to align graph node locations with image data. </p>"},{"location":"specification/#geff.units.VALID_AXIS_TYPES","title":"geff.units.VALID_AXIS_TYPES  <code>module-attribute</code>","text":"<pre><code>VALID_AXIS_TYPES = ['space', 'time', 'channel']\n</code></pre>"},{"location":"specification/#geff.units.VALID_SPACE_UNITS","title":"geff.units.VALID_SPACE_UNITS  <code>module-attribute</code>","text":"<pre><code>VALID_SPACE_UNITS = [\n    \"angstrom\",\n    \"attometer\",\n    \"centimeter\",\n    \"decimeter\",\n    \"exameter\",\n    \"femtometer\",\n    \"foot\",\n    \"gigameter\",\n    \"hectometer\",\n    \"inch\",\n    \"kilometer\",\n    \"megameter\",\n    \"meter\",\n    \"micrometer\",\n    \"mile\",\n    \"millimeter\",\n    \"nanometer\",\n    \"parsec\",\n    \"petameter\",\n    \"picometer\",\n    \"terameter\",\n    \"yard\",\n    \"yoctometer\",\n    \"yottameter\",\n    \"zeptometer\",\n    \"zettameter\",\n]\n</code></pre>"},{"location":"specification/#geff.units.VALID_TIME_UNITS","title":"geff.units.VALID_TIME_UNITS  <code>module-attribute</code>","text":"<pre><code>VALID_TIME_UNITS = [\n    \"attosecond\",\n    \"centisecond\",\n    \"day\",\n    \"decisecond\",\n    \"exasecond\",\n    \"femtosecond\",\n    \"gigasecond\",\n    \"hectosecond\",\n    \"hour\",\n    \"kilosecond\",\n    \"megasecond\",\n    \"microsecond\",\n    \"millisecond\",\n    \"minute\",\n    \"nanosecond\",\n    \"petasecond\",\n    \"picosecond\",\n    \"second\",\n    \"terasecond\",\n    \"yoctosecond\",\n    \"yottasecond\",\n    \"zeptosecond\",\n    \"zettasecond\",\n]\n</code></pre>"},{"location":"specification/#the-nodes-group","title":"The <code>nodes</code> group","text":"<p>The nodes group will contain an <code>ids</code> array and optionally a <code>props</code> group. </p>"},{"location":"specification/#the-ids-array","title":"The <code>ids</code> array","text":"<p>The <code>nodes\\ids</code> array is a 1D array of node IDs of length <code>N</code> &gt;= 0, where <code>N</code> is the number of nodes in the graph. Node ids must be unique. Node IDs can have any type supported by zarr (except floats), but we recommend integer dtypes. For large graphs, <code>uint64</code> might be necessary to provide enough range for every node to have a unique ID. In the minimal case of an empty graph, the <code>ids</code> array will be present but empty. </p>"},{"location":"specification/#the-props-group-and-node-property-groups","title":"The <code>props</code> group and <code>node property</code> groups","text":"<p>The <code>nodes\\props</code> group is optional and will contain one or more <code>node property</code> groups, each with a <code>values</code> array and an optional <code>missing</code> array.</p> <ul> <li><code>values</code> arrays can be any zarr supported dtype, and can be N-dimensional. The first dimension of the <code>values</code> array must have the same length as the node <code>ids</code> array, such that each row of the property <code>values</code> array stores the property for the node at that index in the ids array.</li> <li> <p>The <code>missing</code> array is an optional, a one dimensional boolean array to support properties that are not present on all nodes. A <code>1</code> at an index in the <code>missing</code> array indicates that the <code>value</code> of that property for the node at that index is None, and the value in the <code>values</code> array at that index should be ignored. If the <code>missing</code> array is not present, that means that all nodes have values for the property.</p> </li> <li> <p>Geff provides special support for spatio-temporal properties, although they are not required. When <code>axes</code> are specified in the <code>geff</code> metadata, each axis name identifies a spatio-temporal property. Spatio-temporal properties are not allowed to have missing arrays. Otherwise, they are identical to other properties from a storage specification perspective.</p> </li> <li> <p>The <code>seg_id</code> property is an optional, special node property that stores the segmenatation label for each node. The <code>seg_id</code> values do not need to be unique, in case labels are repeated between time points. If the <code>seg_id</code> property is not present, it is assumed that the graph is not associated with a segmentation. </p> </li> </ul> <p>Note</p> <p>When writing a graph with missing properties to the geff format, you must fill in a dummy value in the <code>values</code> array for the nodes that are missing the property, in order to keep the indices aligned with the node ids. </p>"},{"location":"specification/#the-edges-group","title":"The <code>edges</code> group","text":"<p>Similar to the <code>nodes</code> group, the <code>edges</code> group will contain an <code>ids</code> array and an optional <code>props</code> group.</p>"},{"location":"specification/#the-ids-array_1","title":"The <code>ids</code> array","text":"<p>The <code>edges\\ids</code> array is a 2D array with the same dtype as the <code>nodes\\ids</code> array. It has shape <code>(E, 2)</code>, where <code>E</code> is the number of edges in the graph. If there are no edges in the graph, the edge group and <code>ids</code> array must be present with shape <code>(0, 2)</code>.  All elements in the <code>edges\\ids</code> array must also be present in the <code>nodes\\ids</code> array, and the data types of the two id arrays must match. Each row represents an edge between two nodes. For directed graphs, the first column is the source nodes and the second column holds the target nodes. For undirected graphs, the order is arbitrary. Edges should be unique (no multiple edges between the same two nodes) and edges from a node to itself are not supported.</p>"},{"location":"specification/#the-props-group-and-edge-property-groups","title":"The <code>props</code> group and <code>edge property</code> groups","text":"<p>The <code>edges\\props</code> group will contain zero or more <code>edge property</code> groups, each with a <code>values</code> array and an optional <code>missing</code> array.</p> <ul> <li><code>values</code> arrays can be any zarr supported dtype, and can be N-dimensional. The first dimension of the <code>values</code> array must have the same length as the <code>edges\\ids</code> array, such that each row of the property <code>values</code> array stores the property for the edge at that index in the ids array.</li> <li>The <code>missing</code> array is an optional, a one dimensional boolean array to support properties that are not present on all edges. A <code>1</code> at an index in the <code>missing</code> array indicates that the <code>value</code> of that property for the edge at that index is missing, and the value in the <code>values</code> array at that index should be ignored. If the <code>missing</code> array is not present, that means that all edges have values for the property.</li> </ul> <p>The <code>edges/props</code> is optional. If you do not have any edge properties, the <code>edges\\props</code> can be absent. </p>"},{"location":"specification/#example-file-structure-and-metadata","title":"Example file structure and metadata","text":"<p>Here is a schematic of the expected file structure. <pre><code>/path/to.zarr\n    /tracking_graph\n        .zattrs  # graph metadata with `geff_version`\n        nodes/\n            ids  # shape: (N,)  dtype: uint64\n            props/\n                t/\n                    values # shape: (N,) dtype: uint16\n                z/\n                    values # shape: (N,) dtype: float32\n                y/\n                    values # shape: (N,) dtype: float32\n                x/\n                    values # shape: (N,) dtype: float32\n                color/\n                    values # shape: (N, 4) dtype: float16\n                    missing # shape: (N,) dtype: bool\n        edges/\n            ids  # shape: (E, 2) dtype: uint64\n            props/\n                distance/\n                    values # shape: (E,) dtype: float16\n                score/\n                    values # shape: (E,) dtype: float16\n                    missing # shape: (E,) dtype: bool\n    # optional:\n    /segmentation \n\n    # unspecified, but totally okay:\n    /raw \n</code></pre> This is a geff metadata zattrs file that matches the above example structure. <pre><code># /path/to.zarr/tracking_graph/.zattrs\n{   \n    \"geff\": {\n        \"directed\": true,\n        \"geff_version\": \"0.1.3.dev4+gd5d1132.d20250616\",\n        \"axes\": [ # optional\n            {'name': 't', 'type': \"time\", 'unit': \"seconds\", 'min': 0, 'max': 125},\n            {'name': 'z', 'type': \"space\", 'unit': \"micrometers\", 'min': 1523.36, 'max': 4398.1},\n            {'name': 'y', 'type': \"space\", 'unit': \"micrometers\", 'min': 81.667, 'max': 1877.7},\n            {'name': 'x', 'type': \"space\", 'unit': \"micrometers\", 'min': 764.42, 'max': 2152.3},\n        ]\n    }\n    ... # custom other things are allowed and ignored by geff\n}\n</code></pre></p>"},{"location":"what-is-geff/","title":"What is geff?","text":"<p><code>geff</code> is a graph exchange file format that seeks to fulfill the following needs:</p> <ul> <li>Provide a storage/exchange format for graphs and optional segmentation</li> <li>Provide a common API with reference implementations for use in other projects</li> </ul>"},{"location":"what-is-geff/#design-decisions-and-assumptions","title":"Design Decisions and Assumptions","text":"<ul> <li>Raw image data is not included in the <code>geff</code> spec. However, to keep nodes linked to segmentation labels, support for specifying the seg_id of each node in a standard way, along with the path to the segmentation, are included in the <code>spec</code>.</li> <li>Since <code>geff</code> is an exchange format, we do not provide support for searching or filtering.</li> <li>We do not provide support for editing or changing the graph on the fly.</li> <li>In order to support efficient reading/writing, we assume the graph can fit into memory.</li> </ul>"}]}